@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cf: <http://www.example.com/controlflow#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix ptoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix ptype: <http://example.com/ptype#> .
@prefix prov: <http://www.w3.org/ns/prov#> .

cf:Is a fno:Function ;
      a prov:Entity ;
      fno:name "is" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:ObjectParameter1 ;
                    rdf:_2 cf:ObjectParameter2 ] ;
      fno:returns [ a rdf:Seq ;
                    rdf:_1 cf:BoolOutput ] ;
      dcterms:description "The is function compares two objects and returns wether the first object is the same as the second object" .

cf:IsNot a fno:Function ;
         a prov:Entity ;
         fno:name "isNot" ;
         fno:expects [ a rdf:Seq ;
                       rdf:_1 cf:ObjectParameter1 ;
                       rdf:_2 cf:ObjectParameter2 ] ;
         fno:returns [ a rdf:Seq ;
                       rdf:_1 cf:BoolOutput ] ;
         dcterms:description "The is function compares two objects and returns wether the first object is not the same as the second object" .

cf:ObjectParameter1 a fno:Parameter ;
                    fno:predicate cf:object1 ;
                    fno:type ptype:Any .

cf:ObjectParameter2 a fno:Parameter ;
                    fno:predicate cf:object2 ;
                    fno:type ptype:Any .

# LOOPS

cf:for a fno:Function ;
       a prov:Entity ;
       fno:name "for" ;
       fno:expects [ a rdf:Seq ;
                     rdf:_1 cf:IterParameter ] ;
       fno:returns [ a rdf:Seq ;
                     rdf:_1 cf:TargetOutput ] ;
       dcterms:descrition "The for function iterates over the elements of the IterParameter." .

cf:IterParameter a fno:Parameter ;
                   fno:required "True"^^xsd:bool ;
                   fno:predicate cf:iter .

cf:TargetOutput a fno:Output ;
                  fno:required "True"^^xsd:bool ;
                  fno:predicate cf:target .

# IF

cf:if a fno:Function ;
      a prov:Entity ;
      fno:name "if" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:TestParameter ] .

cf:ifexpr a fno:Function ;
          a prov:Entity ;
          fno:expects [ a rdf:Seq ;
                        rdf:_1 cf:TestParameter ;
                        rdf:_2 cf:IfTrueParameter ;
                        rdf:_3 cf:IfFalseParameter ] ;
          fno:returns [ a rdf:Seq ;
                        rdf:_1 cf:IfExprOutput ] ;
          dcterms:descrition "ask GPT for description" .

cf:TestParameter a fno:Parameter ;
                 fno:predicate cf:test ;
                 fno:type ptype:bool .

cf:IfTrueParameter a fno:Parameter ;
                   fno:predicate cf:trueValue ;
                   fno:type ptype:Any .

cf:IfFalseParameter a fno:Parameter ;
                    fno:predicate cf:falseValue ;
                    fno:type ptype:Any .

cf:IfExprOutput a fno:Output ;
                fno:predicate cf:ifExprResult ;
                fno:type ptype:Any .

# CONTAINTERS

cf:slice a fno:Function ;
         a prov:Entity ;
         fno:name "slice" ;
         fno:expects [ a rdf:Seq ;
                       rdf:_1 cf:LowerIndexParameter ;
                       rdf:_2 cf:UpperIndexParameter ;
                       rdf:_3 cf:StepParameter ] ;
         fno:returns [ a rdf:Seq ;
                       rdf:_1 cf:SliceOutput ] ;
         dcterms:descrition "Create a slicing object." .

cf:LowerIndexParameter a fno:Parameter ;
                       fno:predicate cf:lower ;
                       fno:type xsd:integer .

cf:UpperIndexParameter a fno:Parameter ;
                       fno:predicate cf:upper ;
                       fno:type xsd:integer .

cf:StepParameter a fno:Parameter ;
                 fno:predicate cf:step ;
                 fno:type xsd:integer .

cf:SliceOutput a fno:Output ;
               fno:predicate cf:sliceResult ;
               fno:type rdf:Resource .

# CONTAINTERS

cf:list a fno:Function ;
      a prov:Entity ;
      fno:name "list" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:Elements ] ;
      fno:returns [ a rdf:Seq ;
                      rdf:_1 cf:ListOutput ] ;
      dcterms:descrition "ask GPT for description" .

cf:Elements a fno:Parameter ;
            fno:predicate cf:elements .

cf:ListOutput a fno:Output ;
              fno:predicate cf:listResult ;
              fno:type rdf:List .

cf:tuple a fno:Function ;
      a prov:Entity ;
      fno:name "tuple" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:Elements ] ;
      fno:returns [ a rdf:Seq ;
                    rdf:_1 cf:TupleOutput ] ;
      dcterms:descrition "ask GPT for description" .

cf:TupleOutput a fno:Output ;
               fno:predicate cf:tupleResult ;
               fno:type rdf:List .

cf:dict a fno:Function ;
      a prov:Entity ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:Pairs ] ;
      fno:returns [ a rdf:Seq ;
                      rdf:_1 cf:DictOutput ] ;
      dcterms:descrition "ask GPT for description" .

cf:Pairs a fno:Parameter ;
         fno:predicate cf:pairs ;
         fno:type rdf:Seq .

cf:DictOutput a fno:Output ;
              fno:predicate cf:dictResult ;
              fno:type rdf:Seq .

# ATTRIBUTE

cf:attribute a fno:Function ;
      a prov:Entity ;
      fno:name "attr" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:ValueParameter ;
                    rdf:_2 cf:AttributeParameter ] ;
      fno:returns [ a rdf:Seq ;
                    rdf:_1 cf:AttributeOutput ;
                    rdf:_2 cf:AttributeSelfOutput ] ;
      dcterms:description "The attrbiute functions access an attribute of an object." .

cf:ValueParameter a fno:Parameter ;
                    fno:predicate cf:value ;
                    fno:type rdf:Resource .

cf:AttributeParameter a fno:Parameter ;
                    fno:predicate cf:attr ;
                    fno:type xsd:string .

cf:AttributeOutput a fno:Output ;
            fno:predicate cf:attrResult ;
            fno:type rdf:Resource .

cf:AttributeSelfOutput a fno:Output ;
            fno:predicate cf:self_output ;
            fno:type rdf:Resource .

# FORMAT

cf:joinstr a fno:Function ;
      a prov:Entity ;
      fno:name "joinstr" ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:Delimiter ;
                    rdf:_2 cf:Strings ] ;
      fno:returns [ a rdf:Seq ;
                    rdf:_1 cf:JoinStringOutput ] ;
      dcterms:description "Join a list of strings with a given delimiter." .

cf:JoinStringOutput a fno:Output ;
    fno:predicate cf:joinstrResult ;
    fno:type xsd:string .

cf:Strings a fno:Parameter ;
    fno:predicate cf:strings ;
    fno:required true ;
    fno:type rdfs:list .

cf:Delimiter a fno:Parameter ;
    fno:predicate cf:self ;
    fno:required true ;
    fno:type xsd:string .

cf:format a fno:Function ;
      a prov:Entity ;
      fno:expects [ a rdf:Seq ;
                    rdf:_1 cf:ValueParameter ;
                    rdf:_2 cf:ConversionParameter ;
                    rdf:_2 cf:SpecParameter ] ;
      fno:returns [ a rdf:Seq ;
                    rdf:_1 cf:FormatOutput ] ;
      dcterms:description "Format a value to a string" .

cf:ConversionParameter a fno:Parameter ;
      fno:predicate cf:conversion ;
      fno:type xsd:string .

cf:SpecParameter a fno:Parameter ;
      fno:predicate cf:spec ;
      fno:type xsd:string .

cf:FormatOutput a fno:Output ;
      fno:predicate cf:formatResult ;
      fno:type xsd:string .