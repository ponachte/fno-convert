@prefix cf: <http://www.example.com/controlflow#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix ex: <http://www.example.com#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix python: <http://www.example.com/python#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex:GaussianNBMapping a fno:Mapping ;
    fno:function ex:GaussianNB ;
    fno:implementation python:GaussianNB01c640dc ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "GaussianNB" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:GaussianNBParameter0 ;
            fnom:implementationProperty "priors" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:GaussianNBParameter0 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 1e-09 ;
            fnom:functionParameter ex:GaussianNBParameter1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:GaussianNBParameter1 ;
            fnom:implementationProperty "var_smoothing" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:GaussianNBOutput ] ;
    fnom:mappingMethod "default" .

ex:LabelEncoderMapping a fno:Mapping ;
    fno:function ex:LabelEncoder ;
    fno:implementation python:LabelEncoder4715175f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "LabelEncoder" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:LabelEncoderOutput ] ;
    fnom:mappingMethod "default" .

ex:RandomForestClassifierMapping a fno:Mapping ;
    fno:function ex:RandomForestClassifier ;
    fno:implementation python:RandomForestClassifier30fc02e2 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "RandomForestClassifier" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter2 ;
            fnom:implementationProperty "max_depth" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter18 ;
            fnom:implementationProperty "monotonic_cst" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter14 ;
            fnom:implementationProperty "warm_start" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0e+00 ;
            fnom:functionParameter ex:RandomForestClassifierParameter16 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter11 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0e+00 ;
            fnom:functionParameter ex:RandomForestClassifierParameter8 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter12 ;
            fnom:implementationProperty "random_state" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter15 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter1 ;
            fnom:implementationProperty "criterion" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 2 ;
            fnom:functionParameter ex:RandomForestClassifierParameter3 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter6 ;
            fnom:implementationProperty "max_features" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter15 ;
            fnom:implementationProperty "class_weight" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "gini" ;
            fnom:functionParameter ex:RandomForestClassifierParameter1 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:RandomForestClassifierParameter10 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter12 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter9 ;
            fnom:implementationProperty "bootstrap" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter16 ;
            fnom:implementationProperty "ccp_alpha" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter10 ;
            fnom:implementationProperty "oob_score" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter17 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter3 ;
            fnom:implementationProperty "min_samples_split" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter4 ;
            fnom:implementationProperty "min_samples_leaf" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:RandomForestClassifierParameter14 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0e+00 ;
            fnom:functionParameter ex:RandomForestClassifierParameter5 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter8 ;
            fnom:implementationProperty "min_impurity_decrease" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:RandomForestClassifierParameter9 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter17 ;
            fnom:implementationProperty "max_samples" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 1 ;
            fnom:functionParameter ex:RandomForestClassifierParameter4 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0 ;
            fnom:functionParameter ex:RandomForestClassifierParameter13 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter11 ;
            fnom:implementationProperty "n_jobs" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 100 ;
            fnom:functionParameter ex:RandomForestClassifierParameter0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter13 ;
            fnom:implementationProperty "verbose" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "sqrt" ;
            fnom:functionParameter ex:RandomForestClassifierParameter6 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter7 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter0 ;
            fnom:implementationProperty "n_estimators" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter7 ;
            fnom:implementationProperty "max_leaf_nodes" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter18 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:RandomForestClassifierParameter5 ;
            fnom:implementationProperty "min_weight_fraction_leaf" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:RandomForestClassifierParameter2 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:RandomForestClassifierOutput ] ;
    fnom:mappingMethod "default" .

ex:SVCMapping a fno:Mapping ;
    fno:function ex:SVC ;
    fno:implementation python:SVCcd20989e ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "SVC" ] ;
    fno:parameterMapping [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "ovr" ;
            fnom:functionParameter ex:SVCParameter12 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "rbf" ;
            fnom:functionParameter ex:SVCParameter1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter13 ;
            fnom:implementationProperty "break_ties" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter9 ;
            fnom:implementationProperty "class_weight" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "scale" ;
            fnom:functionParameter ex:SVCParameter3 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:SVCParameter14 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter8 ;
            fnom:implementationProperty "cache_size" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 1e+00 ;
            fnom:functionParameter ex:SVCParameter0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter12 ;
            fnom:implementationProperty "decision_function_shape" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter0 ;
            fnom:implementationProperty "C" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 1e-03 ;
            fnom:functionParameter ex:SVCParameter7 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:SVCParameter9 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter10 ;
            fnom:implementationProperty "verbose" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:SVCParameter5 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 3 ;
            fnom:functionParameter ex:SVCParameter2 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter11 ;
            fnom:implementationProperty "max_iter" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter1 ;
            fnom:implementationProperty "kernel" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:SVCParameter13 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue -1 ;
            fnom:functionParameter ex:SVCParameter11 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter3 ;
            fnom:implementationProperty "gamma" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter2 ;
            fnom:implementationProperty "degree" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter4 ;
            fnom:implementationProperty "coef0" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:SVCParameter6 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0e+00 ;
            fnom:functionParameter ex:SVCParameter4 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter6 ;
            fnom:implementationProperty "probability" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter7 ;
            fnom:implementationProperty "tol" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter14 ;
            fnom:implementationProperty "random_state" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:SVCParameter5 ;
            fnom:implementationProperty "shrinking" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:SVCParameter10 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 200 ;
            fnom:functionParameter ex:SVCParameter8 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:SVCOutput ] ;
    fnom:mappingMethod "default" .

ex:dropnaMapping a fno:Mapping ;
    fno:function ex:dropna ;
    fno:implementation python:getattre513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "dropna" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dropnaParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dropnaParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:dropnaOutput ] ;
    fnom:mappingMethod "default" .

ex:dumpMapping a fno:Mapping ;
    fno:function ex:dump ;
    fno:implementation python:dump7c27a01e ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "dump" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:dumpParameter2 ;
            fnom:implementationProperty "compress" ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dumpParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:dumpParameter1 ;
            fnom:implementationProperty "filename" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:dumpParameter0 ;
            fnom:implementationProperty "value" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:dumpParameter4 ;
            fnom:implementationProperty "cache_size" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:dumpParameter3 ;
            fnom:implementationProperty "protocol" ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dumpParameter2 ;
            fnom:implementationParameterPosition 2 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dumpParameter3 ;
            fnom:implementationParameterPosition 3 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:dumpParameter3 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0 ;
            fnom:functionParameter ex:dumpParameter2 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:dumpParameter4 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dumpParameter4 ;
            fnom:implementationParameterPosition 4 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:dumpParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:dumpOutput ] ;
    fnom:mappingMethod "default" .

ex:fitMapping a fno:Mapping ;
    fno:function ex:fit ;
    fno:implementation python:getattre513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "fit" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:fitParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:fitParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:fitOutput ] ;
    fnom:mappingMethod "default" .

ex:fit_transformMapping a fno:Mapping ;
    fno:function ex:fit_transform ;
    fno:implementation python:getattre513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "fit_transform" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:fit_transformParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:fit_transformParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:fit_transformOutput ] ;
    fnom:mappingMethod "default" .

ex:getitemMapping a fno:Mapping ;
    fno:function ex:getitem ;
    fno:implementation python:getitem3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "getitem" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:getitemParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:getitemParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:getitemOutput ] ;
    fnom:mappingMethod "default" .

ex:ilocMapping a fno:Mapping ;
    fno:function ex:iloc ;
    fno:implementation python:getattre513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "iloc" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:ilocParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:ilocParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:ilocOutput ] ;
    fnom:mappingMethod "default" .

ex:op_negMapping a fno:Mapping ;
    fno:function ex:op_neg ;
    fno:implementation python:neg3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "neg" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_negParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_negOutput ] ;
    fnom:mappingMethod "default" .

ex:read_csvMapping a fno:Mapping ;
    fno:function ex:read_csv ;
    fno:implementation python:read_csv286fd7b9 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "read_csv" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter26 ;
            fnom:implementationProperty "dayfirst" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter28 ;
            fnom:implementationProperty "iterator" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter9 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter11 ;
            fnom:implementationProperty "false_values" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter48 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter31 ;
            fnom:implementationProperty "thousands" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter44 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter21 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:read_csvParameter45 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter5 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter38 ;
            fnom:implementationProperty "comment" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter34 ;
            fnom:implementationProperty "quotechar" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter17 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter6 ;
            fnom:implementationProperty "usecols" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "." ;
            fnom:functionParameter ex:read_csvParameter32 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter35 ;
            fnom:implementationProperty "quoting" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter36 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter32 ;
            fnom:implementationProperty "decimal" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter10 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter23 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter25 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter7 ;
            fnom:implementationProperty "dtype" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter16 ;
            fnom:implementationProperty "na_values" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0 ;
            fnom:functionParameter ex:read_csvParameter35 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter7 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter43 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter22 ;
            fnom:implementationProperty "infer_datetime_format" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter37 ;
            fnom:implementationProperty "escapechar" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter46 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter2 ;
            fnom:implementationProperty "delimiter" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter23 ;
            fnom:implementationProperty "keep_date_col" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter47 ;
            fnom:implementationProperty "storage_options" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter31 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter18 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter24 ;
            fnom:implementationProperty "date_parser" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter18 ;
            fnom:implementationProperty "na_filter" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter42 ;
            fnom:implementationProperty "on_bad_lines" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter8 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter2 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter12 ;
            fnom:implementationProperty "skipinitialspace" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter39 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter48 ;
            fnom:implementationProperty "dtype_backend" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter29 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter13 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter37 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0 ;
            fnom:functionParameter ex:read_csvParameter14 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter29 ;
            fnom:implementationProperty "chunksize" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter21 ;
            fnom:implementationProperty "parse_dates" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter13 ;
            fnom:implementationProperty "skiprows" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter47 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter5 ;
            fnom:implementationProperty "index_col" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter33 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter40 ;
            fnom:implementationProperty "encoding_errors" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter11 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter17 ;
            fnom:implementationProperty "keep_default_na" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter43 ;
            fnom:implementationProperty "delim_whitespace" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter15 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter19 ;
            fnom:implementationProperty "verbose" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter19 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter3 ;
            fnom:implementationProperty "header" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter1 ;
            fnom:implementationProperty "sep" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter46 ;
            fnom:implementationProperty "float_precision" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter6 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter41 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter41 ;
            fnom:implementationProperty "dialect" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:read_csvParameter26 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter36 ;
            fnom:implementationProperty "doublequote" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "error" ;
            fnom:functionParameter ex:read_csvParameter42 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter8 ;
            fnom:implementationProperty "engine" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter4 ;
            fnom:implementationProperty "names" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter38 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:read_csvParameter12 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter45 ;
            fnom:implementationProperty "memory_map" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter44 ;
            fnom:implementationProperty "low_memory" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter10 ;
            fnom:implementationProperty "true_values" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter39 ;
            fnom:implementationProperty "encoding" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter4 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "strict" ;
            fnom:functionParameter ex:read_csvParameter40 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "infer" ;
            fnom:functionParameter ex:read_csvParameter3 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter20 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter15 ;
            fnom:implementationProperty "nrows" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "\"" ;
            fnom:functionParameter ex:read_csvParameter34 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter0 ;
            fnom:implementationProperty "filepath_or_buffer" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter14 ;
            fnom:implementationProperty "skipfooter" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter33 ;
            fnom:implementationProperty "lineterminator" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter24 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "_NoDefault.no_default"^^python:_NoDefault44fd7083 ;
            fnom:functionParameter ex:read_csvParameter22 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:read_csvParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter27 ;
            fnom:implementationProperty "cache_dates" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter25 ;
            fnom:implementationProperty "date_format" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter30 ;
            fnom:implementationProperty "compression" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "infer" ;
            fnom:functionParameter ex:read_csvParameter30 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter ex:read_csvParameter28 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^python:NoneTypee513fb1f ;
            fnom:functionParameter ex:read_csvParameter16 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter20 ;
            fnom:implementationProperty "skip_blank_lines" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:read_csvParameter9 ;
            fnom:implementationProperty "converters" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue true ;
            fnom:functionParameter ex:read_csvParameter27 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:read_csvOutput ] ;
    fnom:mappingMethod "default" .

ex:setitemMapping a fno:Mapping ;
    fno:function ex:setitem ;
    fno:implementation python:setitem3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "setitem" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:setitemParameter2 ;
            fnom:implementationParameterPosition 2 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:setitemParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:setitemParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:setitemOutput ] ;
    fnom:mappingMethod "default" .

ex:trainComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_3 ;
                    fnoc:functionParameter cf:StepParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:read_csv_1 ;
                    fnoc:functionOutput ex:read_csvOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dropna_1 ;
                    fnoc:functionParameter ex:dropnaParameter0 ] ],
        [ fnoc:mapFromTerm "dataset/Training.csv" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:read_csv_1 ;
                    fnoc:functionParameter ex:read_csvParameter0 ] ],
        [ fnoc:mapFromTerm "iloc" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:iloc_2 ;
                    fnoc:functionParameter ex:ilocParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_neg_1 ;
                    fnoc:functionOutput ex:op_negOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_2 ;
                    fnoc:functionParameter cf:UpperIndexParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction cf:slice_2 ;
                    fnoc:functionOutput cf:SliceOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:tuple_1 ;
                    fnoc:functionParameter cf:Elements ;
                    fnoc:key 1 ;
                    fnoc:mappingStrategy fnoc:toList ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_neg_2 ;
                    fnoc:functionOutput ex:op_negOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:tuple_2 ;
                    fnoc:functionParameter cf:Elements ;
                    fnoc:key 1 ;
                    fnoc:mappingStrategy fnoc:toList ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction cf:tuple_2 ;
                    fnoc:functionOutput cf:TupleOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:getitem_2 ;
                    fnoc:functionParameter ex:getitemParameter1 ] ],
        [ fnoc:mapFromTerm 1 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_neg_1 ;
                    fnoc:functionParameter ex:op_negParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:LabelEncoder_1 ;
                    fnoc:functionOutput ex:LabelEncoderOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_transform_1 ;
                    fnoc:functionParameter ex:fit_transformParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:dropna_1 ;
                    fnoc:functionOutput ex:dropnaOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:setitem_1 ;
                    fnoc:functionParameter ex:setitemParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction cf:tuple_1 ;
                    fnoc:functionOutput cf:TupleOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:getitem_1 ;
                    fnoc:functionParameter ex:getitemParameter1 ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_1 ;
                    fnoc:functionParameter cf:StepParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:fit_transform_1 ;
                    fnoc:functionOutput ex:fit_transformOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:setitem_1 ;
                    fnoc:functionParameter ex:setitemParameter2 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction cf:slice_3 ;
                    fnoc:functionOutput cf:SliceOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:tuple_2 ;
                    fnoc:functionParameter cf:Elements ;
                    fnoc:key 0 ;
                    fnoc:mappingStrategy fnoc:toList ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_1 ;
                    fnoc:functionParameter cf:LowerIndexParameter ] ],
        [ fnoc:mapFromTerm "models/nb_model.pkl" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_3 ;
                    fnoc:functionParameter ex:dumpParameter1 ] ],
        [ fnoc:mapFromTerm "fit" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_1 ;
                    fnoc:functionParameter ex:fitParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:RandomForestClassifier_1 ;
                    fnoc:functionOutput ex:RandomForestClassifierOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_3 ;
                    fnoc:functionParameter ex:fitParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:GaussianNB_1 ;
                    fnoc:functionOutput ex:GaussianNBOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_2 ;
                    fnoc:functionParameter ex:fitParameter0 ] ],
        [ fnoc:mapFromTerm "dropna" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dropna_1 ;
                    fnoc:functionParameter ex:dropnaParameter1 ] ],
        [ fnoc:mapFromTerm 18 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:RandomForestClassifier_1 ;
                    fnoc:functionParameter ex:RandomForestClassifierParameter12 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction cf:slice_1 ;
                    fnoc:functionOutput cf:SliceOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:tuple_1 ;
                    fnoc:functionParameter cf:Elements ;
                    fnoc:key 0 ;
                    fnoc:mappingStrategy fnoc:toList ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_3 ;
                    fnoc:functionParameter cf:LowerIndexParameter ] ],
        [ fnoc:mapFromTerm "iloc" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:iloc_1 ;
                    fnoc:functionParameter ex:ilocParameter1 ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_2 ;
                    fnoc:functionParameter cf:LowerIndexParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:setitem_1 ;
                    fnoc:functionOutput ex:setitemOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:iloc_1 ;
                    fnoc:functionParameter ex:ilocParameter0 ] ],
        [ fnoc:mapFromTerm "prognosis" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:setitem_1 ;
                    fnoc:functionParameter ex:setitemParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:iloc_2 ;
                    fnoc:functionOutput ex:ilocOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:getitem_2 ;
                    fnoc:functionParameter ex:getitemParameter0 ] ],
        [ fnoc:mapFromTerm "fit" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_3 ;
                    fnoc:functionParameter ex:fitParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:SVC_1 ;
                    fnoc:functionOutput ex:SVCOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_1 ;
                    fnoc:functionParameter ex:fitParameter0 ] ],
        [ fnoc:mapFromTerm "fit" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_2 ;
                    fnoc:functionParameter ex:fitParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:SVC_1 ;
                    fnoc:functionOutput ex:SVCOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_2 ;
                    fnoc:functionParameter ex:dumpParameter0 ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_3 ;
                    fnoc:functionParameter cf:UpperIndexParameter ] ],
        [ fnoc:mapFromTerm "fit_transform" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:fit_transform_1 ;
                    fnoc:functionParameter ex:fit_transformParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:RandomForestClassifier_1 ;
                    fnoc:functionOutput ex:RandomForestClassifierOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_4 ;
                    fnoc:functionParameter ex:dumpParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:LabelEncoder_1 ;
                    fnoc:functionOutput ex:LabelEncoderOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_1 ;
                    fnoc:functionParameter ex:dumpParameter0 ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_2 ;
                    fnoc:functionParameter cf:StepParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:setitem_1 ;
                    fnoc:functionOutput ex:setitemOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:iloc_2 ;
                    fnoc:functionParameter ex:ilocParameter0 ] ],
        [ fnoc:mapFromTerm "models/rf_model.pkl" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_4 ;
                    fnoc:functionParameter ex:dumpParameter1 ] ],
        [ fnoc:mapFromTerm "models/encoder.pkl" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_1 ;
                    fnoc:functionParameter ex:dumpParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:GaussianNB_1 ;
                    fnoc:functionOutput ex:GaussianNBOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_3 ;
                    fnoc:functionParameter ex:dumpParameter0 ] ],
        [ fnoc:mapFromTerm "None"^^python:NoneTypee513fb1f ;
            fnoc:mapTo [ fnoc:constituentFunction cf:slice_1 ;
                    fnoc:functionParameter cf:UpperIndexParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:iloc_1 ;
                    fnoc:functionOutput ex:ilocOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:getitem_1 ;
                    fnoc:functionParameter ex:getitemParameter0 ] ],
        [ fnoc:mapFromTerm "models/svm_model.pkl" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:dump_2 ;
                    fnoc:functionParameter ex:dumpParameter1 ] ],
        [ fnoc:mapFromTerm 1 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_neg_2 ;
                    fnoc:functionParameter ex:op_negParameter0 ] ] ;
    fnoc:represents ex:train ;
    fnoc:start ex:read_csv_1 .

ex:trainMapping a fno:Mapping ;
    fno:function ex:train ;
    fno:implementation python:train3441e77a ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "train" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:trainOutput ] ;
    fnom:mappingMethod "default" .

python:NoneTypee513fb1f a fnoi:Implementation,
        fnoi:PythonClass ;
    doap:name "NoneType" ;
    fnoi:module "builtins" .

python:_NoDefault44fd7083 a fnoi:Implementation,
        fnoi:PythonClass ;
    doap:name "_NoDefault" ;
    fnoi:module "pandas._libs.lib" ;
    fnoi:package "pandas" .

python:GaussianNB01c640dc a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """
    Gaussian Naive Bayes (GaussianNB).

    Can perform online updates to model parameters via :meth:`partial_fit`.
    For details on algorithm used to update feature means and variance online,
    see `Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and LeVeque
    <http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf>`_.

    Read more in the :ref:`User Guide <gaussian_naive_bayes>`.

    Parameters
    ----------
    priors : array-like of shape (n_classes,), default=None
        Prior probabilities of the classes. If specified, the priors are not
        adjusted according to the data.

    var_smoothing : float, default=1e-9
        Portion of the largest variance of all features that is added to
        variances for calculation stability.

        .. versionadded:: 0.20

    Attributes
    ----------
    class_count_ : ndarray of shape (n_classes,)
        number of training samples observed in each class.

    class_prior_ : ndarray of shape (n_classes,)
        probability of each class.

    classes_ : ndarray of shape (n_classes,)
        class labels known to the classifier.

    epsilon_ : float
        absolute additive value to variances.

    n_features_in_ : int
        Number of features seen during :term:`fit`.

        .. versionadded:: 0.24

    feature_names_in_ : ndarray of shape (`n_features_in_`,)
        Names of features seen during :term:`fit`. Defined only when `X`
        has feature names that are all strings.

        .. versionadded:: 1.0

    var_ : ndarray of shape (n_classes, n_features)
        Variance of each feature per class.

        .. versionadded:: 1.0

    theta_ : ndarray of shape (n_classes, n_features)
        mean of each feature per class.

    See Also
    --------
    BernoulliNB : Naive Bayes classifier for multivariate Bernoulli models.
    CategoricalNB : Naive Bayes classifier for categorical features.
    ComplementNB : Complement Naive Bayes classifier.
    MultinomialNB : Naive Bayes classifier for multinomial models.

    Examples
    --------
    >>> import numpy as np
    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
    >>> Y = np.array([1, 1, 1, 2, 2, 2])
    >>> from sklearn.naive_bayes import GaussianNB
    >>> clf = GaussianNB()
    >>> clf.fit(X, Y)
    GaussianNB()
    >>> print(clf.predict([[-0.8, -1]]))
    [1]
    >>> clf_pf = GaussianNB()
    >>> clf_pf.partial_fit(X, Y, np.unique(Y))
    GaussianNB()
    >>> print(clf_pf.predict([[-0.8, -1]]))
    [1]
    """ ;
    doap:name "GaussianNB" ;
    fnoi:module "sklearn.naive_bayes" ;
    fnoi:package "sklearn" .

python:RandomForestClassifier30fc02e2 a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """
    A random forest classifier.

    A random forest is a meta estimator that fits a number of decision tree
    classifiers on various sub-samples of the dataset and uses averaging to
    improve the predictive accuracy and control over-fitting.
    Trees in the forest use the best split strategy, i.e. equivalent to passing
    `splitter="best"` to the underlying :class:`~sklearn.tree.DecisionTreeClassifier`.
    The sub-sample size is controlled with the `max_samples` parameter if
    `bootstrap=True` (default), otherwise the whole dataset is used to build
    each tree.

    For a comparison between tree-based ensemble models see the example
    :ref:`sphx_glr_auto_examples_ensemble_plot_forest_hist_grad_boosting_comparison.py`.

    Read more in the :ref:`User Guide <forest>`.

    Parameters
    ----------
    n_estimators : int, default=100
        The number of trees in the forest.

        .. versionchanged:: 0.22
           The default value of ``n_estimators`` changed from 10 to 100
           in 0.22.

    criterion : {"gini", "entropy", "log_loss"}, default="gini"
        The function to measure the quality of a split. Supported criteria are
        "gini" for the Gini impurity and "log_loss" and "entropy" both for the
        Shannon information gain, see :ref:`tree_mathematical_formulation`.
        Note: This parameter is tree-specific.

    max_depth : int, default=None
        The maximum depth of the tree. If None, then nodes are expanded until
        all leaves are pure or until all leaves contain less than
        min_samples_split samples.

    min_samples_split : int or float, default=2
        The minimum number of samples required to split an internal node:

        - If int, then consider `min_samples_split` as the minimum number.
        - If float, then `min_samples_split` is a fraction and
          `ceil(min_samples_split * n_samples)` are the minimum
          number of samples for each split.

        .. versionchanged:: 0.18
           Added float values for fractions.

    min_samples_leaf : int or float, default=1
        The minimum number of samples required to be at a leaf node.
        A split point at any depth will only be considered if it leaves at
        least ``min_samples_leaf`` training samples in each of the left and
        right branches.  This may have the effect of smoothing the model,
        especially in regression.

        - If int, then consider `min_samples_leaf` as the minimum number.
        - If float, then `min_samples_leaf` is a fraction and
          `ceil(min_samples_leaf * n_samples)` are the minimum
          number of samples for each node.

        .. versionchanged:: 0.18
           Added float values for fractions.

    min_weight_fraction_leaf : float, default=0.0
        The minimum weighted fraction of the sum total of weights (of all
        the input samples) required to be at a leaf node. Samples have
        equal weight when sample_weight is not provided.

    max_features : {"sqrt", "log2", None}, int or float, default="sqrt"
        The number of features to consider when looking for the best split:

        - If int, then consider `max_features` features at each split.
        - If float, then `max_features` is a fraction and
          `max(1, int(max_features * n_features_in_))` features are considered at each
          split.
        - If "sqrt", then `max_features=sqrt(n_features)`.
        - If "log2", then `max_features=log2(n_features)`.
        - If None, then `max_features=n_features`.

        .. versionchanged:: 1.1
            The default of `max_features` changed from `"auto"` to `"sqrt"`.

        Note: the search for a split does not stop until at least one
        valid partition of the node samples is found, even if it requires to
        effectively inspect more than ``max_features`` features.

    max_leaf_nodes : int, default=None
        Grow trees with ``max_leaf_nodes`` in best-first fashion.
        Best nodes are defined as relative reduction in impurity.
        If None then unlimited number of leaf nodes.

    min_impurity_decrease : float, default=0.0
        A node will be split if this split induces a decrease of the impurity
        greater than or equal to this value.

        The weighted impurity decrease equation is the following::

            N_t / N * (impurity - N_t_R / N_t * right_impurity
                                - N_t_L / N_t * left_impurity)

        where ``N`` is the total number of samples, ``N_t`` is the number of
        samples at the current node, ``N_t_L`` is the number of samples in the
        left child, and ``N_t_R`` is the number of samples in the right child.

        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,
        if ``sample_weight`` is passed.

        .. versionadded:: 0.19

    bootstrap : bool, default=True
        Whether bootstrap samples are used when building trees. If False, the
        whole dataset is used to build each tree.

    oob_score : bool or callable, default=False
        Whether to use out-of-bag samples to estimate the generalization score.
        By default, :func:`~sklearn.metrics.accuracy_score` is used.
        Provide a callable with signature `metric(y_true, y_pred)` to use a
        custom metric. Only available if `bootstrap=True`.

    n_jobs : int, default=None
        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,
        :meth:`decision_path` and :meth:`apply` are all parallelized over the
        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`
        context. ``-1`` means using all processors. See :term:`Glossary
        <n_jobs>` for more details.

    random_state : int, RandomState instance or None, default=None
        Controls both the randomness of the bootstrapping of the samples used
        when building trees (if ``bootstrap=True``) and the sampling of the
        features to consider when looking for the best split at each node
        (if ``max_features < n_features``).
        See :term:`Glossary <random_state>` for details.

    verbose : int, default=0
        Controls the verbosity when fitting and predicting.

    warm_start : bool, default=False
        When set to ``True``, reuse the solution of the previous call to fit
        and add more estimators to the ensemble, otherwise, just fit a whole
        new forest. See :term:`Glossary <warm_start>` and
        :ref:`tree_ensemble_warm_start` for details.

    class_weight : {"balanced", "balanced_subsample"}, dict or list of dicts,             default=None
        Weights associated with classes in the form ``{class_label: weight}``.
        If not given, all classes are supposed to have weight one. For
        multi-output problems, a list of dicts can be provided in the same
        order as the columns of y.

        Note that for multioutput (including multilabel) weights should be
        defined for each class of every column in its own dict. For example,
        for four-class multilabel classification weights should be
        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of
        [{1:1}, {2:5}, {3:1}, {4:1}].

        The "balanced" mode uses the values of y to automatically adjust
        weights inversely proportional to class frequencies in the input data
        as ``n_samples / (n_classes * np.bincount(y))``

        The "balanced_subsample" mode is the same as "balanced" except that
        weights are computed based on the bootstrap sample for every tree
        grown.

        For multi-output, the weights of each column of y will be multiplied.

        Note that these weights will be multiplied with sample_weight (passed
        through the fit method) if sample_weight is specified.

    ccp_alpha : non-negative float, default=0.0
        Complexity parameter used for Minimal Cost-Complexity Pruning. The
        subtree with the largest cost complexity that is smaller than
        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See
        :ref:`minimal_cost_complexity_pruning` for details. See
        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`
        for an example of such pruning.

        .. versionadded:: 0.22

    max_samples : int or float, default=None
        If bootstrap is True, the number of samples to draw from X
        to train each base estimator.

        - If None (default), then draw `X.shape[0]` samples.
        - If int, then draw `max_samples` samples.
        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,
          `max_samples` should be in the interval `(0.0, 1.0]`.

        .. versionadded:: 0.22

    monotonic_cst : array-like of int of shape (n_features), default=None
        Indicates the monotonicity constraint to enforce on each feature.
          - 1: monotonic increase
          - 0: no constraint
          - -1: monotonic decrease

        If monotonic_cst is None, no constraints are applied.

        Monotonicity constraints are not supported for:
          - multiclass classifications (i.e. when `n_classes > 2`),
          - multioutput classifications (i.e. when `n_outputs_ > 1`),
          - classifications trained on data with missing values.

        The constraints hold over the probability of the positive class.

        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.

        .. versionadded:: 1.4

    Attributes
    ----------
    estimator_ : :class:`~sklearn.tree.DecisionTreeClassifier`
        The child estimator template used to create the collection of fitted
        sub-estimators.

        .. versionadded:: 1.2
           `base_estimator_` was renamed to `estimator_`.

    estimators_ : list of DecisionTreeClassifier
        The collection of fitted sub-estimators.

    classes_ : ndarray of shape (n_classes,) or a list of such arrays
        The classes labels (single output problem), or a list of arrays of
        class labels (multi-output problem).

    n_classes_ : int or list
        The number of classes (single output problem), or a list containing the
        number of classes for each output (multi-output problem).

    n_features_in_ : int
        Number of features seen during :term:`fit`.

        .. versionadded:: 0.24

    feature_names_in_ : ndarray of shape (`n_features_in_`,)
        Names of features seen during :term:`fit`. Defined only when `X`
        has feature names that are all strings.

        .. versionadded:: 1.0

    n_outputs_ : int
        The number of outputs when ``fit`` is performed.

    feature_importances_ : ndarray of shape (n_features,)
        The impurity-based feature importances.
        The higher, the more important the feature.
        The importance of a feature is computed as the (normalized)
        total reduction of the criterion brought by that feature.  It is also
        known as the Gini importance.

        Warning: impurity-based feature importances can be misleading for
        high cardinality features (many unique values). See
        :func:`sklearn.inspection.permutation_importance` as an alternative.

    oob_score_ : float
        Score of the training dataset obtained using an out-of-bag estimate.
        This attribute exists only when ``oob_score`` is True.

    oob_decision_function_ : ndarray of shape (n_samples, n_classes) or             (n_samples, n_classes, n_outputs)
        Decision function computed with out-of-bag estimate on the training
        set. If n_estimators is small it might be possible that a data point
        was never left out during the bootstrap. In this case,
        `oob_decision_function_` might contain NaN. This attribute exists
        only when ``oob_score`` is True.

    estimators_samples_ : list of arrays
        The subset of drawn samples (i.e., the in-bag samples) for each base
        estimator. Each subset is defined by an array of the indices selected.

        .. versionadded:: 1.4

    See Also
    --------
    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.
    sklearn.ensemble.ExtraTreesClassifier : Ensemble of extremely randomized
        tree classifiers.
    sklearn.ensemble.HistGradientBoostingClassifier : A Histogram-based Gradient
        Boosting Classification Tree, very fast for big datasets (n_samples >=
        10_000).

    Notes
    -----
    The default values for the parameters controlling the size of the trees
    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and
    unpruned trees which can potentially be very large on some data sets. To
    reduce memory consumption, the complexity and size of the trees should be
    controlled by setting those parameter values.

    The features are always randomly permuted at each split. Therefore,
    the best found split may vary, even with the same training data,
    ``max_features=n_features`` and ``bootstrap=False``, if the improvement
    of the criterion is identical for several splits enumerated during the
    search of the best split. To obtain a deterministic behaviour during
    fitting, ``random_state`` has to be fixed.

    References
    ----------
    .. [1] L. Breiman, "Random Forests", Machine Learning, 45(1), 5-32, 2001.

    Examples
    --------
    >>> from sklearn.ensemble import RandomForestClassifier
    >>> from sklearn.datasets import make_classification
    >>> X, y = make_classification(n_samples=1000, n_features=4,
    ...                            n_informative=2, n_redundant=0,
    ...                            random_state=0, shuffle=False)
    >>> clf = RandomForestClassifier(max_depth=2, random_state=0)
    >>> clf.fit(X, y)
    RandomForestClassifier(...)
    >>> print(clf.predict([[0, 0, 0, 0]]))
    [1]
    """ ;
    doap:name "RandomForestClassifier" ;
    fnoi:module "sklearn.ensemble._forest" ;
    fnoi:package "sklearn" .

python:SVCcd20989e a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """C-Support Vector Classification.

    The implementation is based on libsvm. The fit time scales at least
    quadratically with the number of samples and may be impractical
    beyond tens of thousands of samples. For large datasets
    consider using :class:`~sklearn.svm.LinearSVC` or
    :class:`~sklearn.linear_model.SGDClassifier` instead, possibly after a
    :class:`~sklearn.kernel_approximation.Nystroem` transformer or
    other :ref:`kernel_approximation`.

    The multiclass support is handled according to a one-vs-one scheme.

    For details on the precise mathematical formulation of the provided
    kernel functions and how `gamma`, `coef0` and `degree` affect each
    other, see the corresponding section in the narrative documentation:
    :ref:`svm_kernels`.

    To learn how to tune SVC's hyperparameters, see the following example:
    :ref:`sphx_glr_auto_examples_model_selection_plot_nested_cross_validation_iris.py`

    Read more in the :ref:`User Guide <svm_classification>`.

    Parameters
    ----------
    C : float, default=1.0
        Regularization parameter. The strength of the regularization is
        inversely proportional to C. Must be strictly positive. The penalty
        is a squared l2 penalty. For an intuitive visualization of the effects
        of scaling the regularization parameter C, see
        :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`.

    kernel : {'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'
        Specifies the kernel type to be used in the algorithm. If
        none is given, 'rbf' will be used. If a callable is given it is used to
        pre-compute the kernel matrix from data matrices; that matrix should be
        an array of shape ``(n_samples, n_samples)``. For an intuitive
        visualization of different kernel types see
        :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`.

    degree : int, default=3
        Degree of the polynomial kernel function ('poly').
        Must be non-negative. Ignored by all other kernels.

    gamma : {'scale', 'auto'} or float, default='scale'
        Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.

        - if ``gamma='scale'`` (default) is passed then it uses
          1 / (n_features * X.var()) as value of gamma,
        - if 'auto', uses 1 / n_features
        - if float, must be non-negative.

        .. versionchanged:: 0.22
           The default value of ``gamma`` changed from 'auto' to 'scale'.

    coef0 : float, default=0.0
        Independent term in kernel function.
        It is only significant in 'poly' and 'sigmoid'.

    shrinking : bool, default=True
        Whether to use the shrinking heuristic.
        See the :ref:`User Guide <shrinking_svm>`.

    probability : bool, default=False
        Whether to enable probability estimates. This must be enabled prior
        to calling `fit`, will slow down that method as it internally uses
        5-fold cross-validation, and `predict_proba` may be inconsistent with
        `predict`. Read more in the :ref:`User Guide <scores_probabilities>`.

    tol : float, default=1e-3
        Tolerance for stopping criterion.

    cache_size : float, default=200
        Specify the size of the kernel cache (in MB).

    class_weight : dict or 'balanced', default=None
        Set the parameter C of class i to class_weight[i]*C for
        SVC. If not given, all classes are supposed to have
        weight one.
        The "balanced" mode uses the values of y to automatically adjust
        weights inversely proportional to class frequencies in the input data
        as ``n_samples / (n_classes * np.bincount(y))``.

    verbose : bool, default=False
        Enable verbose output. Note that this setting takes advantage of a
        per-process runtime setting in libsvm that, if enabled, may not work
        properly in a multithreaded context.

    max_iter : int, default=-1
        Hard limit on iterations within solver, or -1 for no limit.

    decision_function_shape : {'ovo', 'ovr'}, default='ovr'
        Whether to return a one-vs-rest ('ovr') decision function of shape
        (n_samples, n_classes) as all other classifiers, or the original
        one-vs-one ('ovo') decision function of libsvm which has shape
        (n_samples, n_classes * (n_classes - 1) / 2). However, note that
        internally, one-vs-one ('ovo') is always used as a multi-class strategy
        to train models; an ovr matrix is only constructed from the ovo matrix.
        The parameter is ignored for binary classification.

        .. versionchanged:: 0.19
            decision_function_shape is 'ovr' by default.

        .. versionadded:: 0.17
           *decision_function_shape='ovr'* is recommended.

        .. versionchanged:: 0.17
           Deprecated *decision_function_shape='ovo' and None*.

    break_ties : bool, default=False
        If true, ``decision_function_shape='ovr'``, and number of classes > 2,
        :term:`predict` will break ties according to the confidence values of
        :term:`decision_function`; otherwise the first class among the tied
        classes is returned. Please note that breaking ties comes at a
        relatively high computational cost compared to a simple predict. See
        :ref:`sphx_glr_auto_examples_svm_plot_svm_tie_breaking.py` for an
        example of its usage with ``decision_function_shape='ovr'``.

        .. versionadded:: 0.22

    random_state : int, RandomState instance or None, default=None
        Controls the pseudo random number generation for shuffling the data for
        probability estimates. Ignored when `probability` is False.
        Pass an int for reproducible output across multiple function calls.
        See :term:`Glossary <random_state>`.

    Attributes
    ----------
    class_weight_ : ndarray of shape (n_classes,)
        Multipliers of parameter C for each class.
        Computed based on the ``class_weight`` parameter.

    classes_ : ndarray of shape (n_classes,)
        The classes labels.

    coef_ : ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)
        Weights assigned to the features (coefficients in the primal
        problem). This is only available in the case of a linear kernel.

        `coef_` is a readonly property derived from `dual_coef_` and
        `support_vectors_`.

    dual_coef_ : ndarray of shape (n_classes -1, n_SV)
        Dual coefficients of the support vector in the decision
        function (see :ref:`sgd_mathematical_formulation`), multiplied by
        their targets.
        For multiclass, coefficient for all 1-vs-1 classifiers.
        The layout of the coefficients in the multiclass case is somewhat
        non-trivial. See the :ref:`multi-class section of the User Guide
        <svm_multi_class>` for details.

    fit_status_ : int
        0 if correctly fitted, 1 otherwise (will raise warning)

    intercept_ : ndarray of shape (n_classes * (n_classes - 1) / 2,)
        Constants in decision function.

    n_features_in_ : int
        Number of features seen during :term:`fit`.

        .. versionadded:: 0.24

    feature_names_in_ : ndarray of shape (`n_features_in_`,)
        Names of features seen during :term:`fit`. Defined only when `X`
        has feature names that are all strings.

        .. versionadded:: 1.0

    n_iter_ : ndarray of shape (n_classes * (n_classes - 1) // 2,)
        Number of iterations run by the optimization routine to fit the model.
        The shape of this attribute depends on the number of models optimized
        which in turn depends on the number of classes.

        .. versionadded:: 1.1

    support_ : ndarray of shape (n_SV)
        Indices of support vectors.

    support_vectors_ : ndarray of shape (n_SV, n_features)
        Support vectors. An empty array if kernel is precomputed.

    n_support_ : ndarray of shape (n_classes,), dtype=int32
        Number of support vectors for each class.

    probA_ : ndarray of shape (n_classes * (n_classes - 1) / 2)
    probB_ : ndarray of shape (n_classes * (n_classes - 1) / 2)
        If `probability=True`, it corresponds to the parameters learned in
        Platt scaling to produce probability estimates from decision values.
        If `probability=False`, it's an empty array. Platt scaling uses the
        logistic function
        ``1 / (1 + exp(decision_value * probA_ + probB_))``
        where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For
        more information on the multiclass case and training procedure see
        section 8 of [1]_.

    shape_fit_ : tuple of int of shape (n_dimensions_of_X,)
        Array dimensions of training vector ``X``.

    See Also
    --------
    SVR : Support Vector Machine for Regression implemented using libsvm.

    LinearSVC : Scalable Linear Support Vector Machine for classification
        implemented using liblinear. Check the See Also section of
        LinearSVC for more comparison element.

    References
    ----------
    .. [1] `LIBSVM: A Library for Support Vector Machines
        <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_

    .. [2] `Platt, John (1999). "Probabilistic Outputs for Support Vector
        Machines and Comparisons to Regularized Likelihood Methods"
        <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_

    Examples
    --------
    >>> import numpy as np
    >>> from sklearn.pipeline import make_pipeline
    >>> from sklearn.preprocessing import StandardScaler
    >>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])
    >>> y = np.array([1, 1, 2, 2])
    >>> from sklearn.svm import SVC
    >>> clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))
    >>> clf.fit(X, y)
    Pipeline(steps=[('standardscaler', StandardScaler()),
                    ('svc', SVC(gamma='auto'))])

    >>> print(clf.predict([[-0.8, -1]]))
    [1]

    For a comaprison of the SVC with other classifiers see:
    :ref:`sphx_glr_auto_examples_classification_plot_classification_probability.py`.
    """ ;
    doap:name "SVC" ;
    fnoi:module "sklearn.svm._classes" ;
    fnoi:package "sklearn" .

python:dump7c27a01e a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description """Persist an arbitrary Python object into one file.

    Read more in the :ref:`User Guide <persistence>`.

    Parameters
    ----------
    value: any Python object
        The object to store to disk.
    filename: str, pathlib.Path, or file object.
        The file object or path of the file in which it is to be stored.
        The compression method corresponding to one of the supported filename
        extensions ('.z', '.gz', '.bz2', '.xz' or '.lzma') will be used
        automatically.
    compress: int from 0 to 9 or bool or 2-tuple, optional
        Optional compression level for the data. 0 or False is no compression.
        Higher value means more compression, but also slower read and
        write times. Using a value of 3 is often a good compromise.
        See the notes for more details.
        If compress is True, the compression level used is 3.
        If compress is a 2-tuple, the first element must correspond to a string
        between supported compressors (e.g 'zlib', 'gzip', 'bz2', 'lzma'
        'xz'), the second element must be an integer from 0 to 9, corresponding
        to the compression level.
    protocol: int, optional
        Pickle protocol, see pickle.dump documentation for more details.
    cache_size: positive int, optional
        This option is deprecated in 0.10 and has no effect.

    Returns
    -------
    filenames: list of strings
        The list of file names in which the data is stored. If
        compress is false, each array is stored in a different file.

    See Also
    --------
    joblib.load : corresponding loader

    Notes
    -----
    Memmapping on load cannot be used for compressed files. Thus
    using compression can significantly slow down loading. In
    addition, compressed files take up extra memory during
    dump and load.

    """ ;
    doap:name "dump" ;
    fnoi:module "joblib.numpy_pickle" ;
    fnoi:package "joblib" .

python:getitem3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a[b]." ;
    doap:name "getitem" ;
    fnoi:module "_operator" .

python:neg3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as -a." ;
    doap:name "neg" ;
    fnoi:module "_operator" .

python:read_csv286fd7b9 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description """
Read a comma-separated values (csv) file into DataFrame.

Also supports optionally iterating or breaking of the file
into chunks.

Additional help can be found in the online docs for
`IO Tools <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html>`_.

Parameters
----------
filepath_or_buffer : str, path object or file-like object
    Any valid string path is acceptable. The string could be a URL. Valid
    URL schemes include http, ftp, s3, gs, and file. For file URLs, a host is
    expected. A local file could be: file://localhost/path/to/table.csv.

    If you want to pass in a path object, pandas accepts any ``os.PathLike``.

    By file-like object, we refer to objects with a ``read()`` method, such as
    a file handle (e.g. via builtin ``open`` function) or ``StringIO``.
sep : str, default ','
    Character or regex pattern to treat as the delimiter. If ``sep=None``, the
    C engine cannot automatically detect
    the separator, but the Python parsing engine can, meaning the latter will
    be used and automatically detect the separator from only the first valid
    row of the file by Python's builtin sniffer tool, ``csv.Sniffer``.
    In addition, separators longer than 1 character and different from
    ``'\\s+'`` will be interpreted as regular expressions and will also force
    the use of the Python parsing engine. Note that regex delimiters are prone
    to ignoring quoted data. Regex example: ``'\\r\\t'``.
delimiter : str, optional
    Alias for ``sep``.
header : int, Sequence of int, 'infer' or None, default 'infer'
    Row number(s) containing column labels and marking the start of the
    data (zero-indexed). Default behavior is to infer the column names: if no ``names``
    are passed the behavior is identical to ``header=0`` and column
    names are inferred from the first line of the file, if column
    names are passed explicitly to ``names`` then the behavior is identical to
    ``header=None``. Explicitly pass ``header=0`` to be able to
    replace existing names. The header can be a list of integers that
    specify row locations for a :class:`~pandas.MultiIndex` on the columns
    e.g. ``[0, 1, 3]``. Intervening rows that are not specified will be
    skipped (e.g. 2 in this example is skipped). Note that this
    parameter ignores commented lines and empty lines if
    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of
    data rather than the first line of the file.
names : Sequence of Hashable, optional
    Sequence of column labels to apply. If the file contains a header row,
    then you should explicitly pass ``header=0`` to override the column names.
    Duplicates in this list are not allowed.
index_col : Hashable, Sequence of Hashable or False, optional
  Column(s) to use as row label(s), denoted either by column labels or column
  indices.  If a sequence of labels or indices is given, :class:`~pandas.MultiIndex`
  will be formed for the row labels.

  Note: ``index_col=False`` can be used to force pandas to *not* use the first
  column as the index, e.g., when you have a malformed file with delimiters at
  the end of each line.
usecols : Sequence of Hashable or Callable, optional
    Subset of columns to select, denoted either by column labels or column indices.
    If list-like, all elements must either
    be positional (i.e. integer indices into the document columns) or strings
    that correspond to column names provided either by the user in ``names`` or
    inferred from the document header row(s). If ``names`` are given, the document
    header row(s) are not taken into account. For example, a valid list-like
    ``usecols`` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.
    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
    To instantiate a :class:`~pandas.DataFrame` from ``data`` with element order
    preserved use ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]``
    for columns in ``['foo', 'bar']`` order or
    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``
    for ``['bar', 'foo']`` order.

    If callable, the callable function will be evaluated against the column
    names, returning names where the callable function evaluates to ``True``. An
    example of a valid callable argument would be ``lambda x: x.upper() in
    ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster
    parsing time and lower memory usage.
dtype : dtype or dict of {Hashable : dtype}, optional
    Data type(s) to apply to either the whole dataset or individual columns.
    E.g., ``{'a': np.float64, 'b': np.int32, 'c': 'Int64'}``
    Use ``str`` or ``object`` together with suitable ``na_values`` settings
    to preserve and not interpret ``dtype``.
    If ``converters`` are specified, they will be applied INSTEAD
    of ``dtype`` conversion.

    .. versionadded:: 1.5.0

        Support for ``defaultdict`` was added. Specify a ``defaultdict`` as input where
        the default determines the ``dtype`` of the columns which are not explicitly
        listed.
engine : {'c', 'python', 'pyarrow'}, optional
    Parser engine to use. The C and pyarrow engines are faster, while the python engine
    is currently more feature-complete. Multithreading is currently only supported by
    the pyarrow engine.

    .. versionadded:: 1.4.0

        The 'pyarrow' engine was added as an *experimental* engine, and some features
        are unsupported, or may not work correctly, with this engine.
converters : dict of {Hashable : Callable}, optional
    Functions for converting values in specified columns. Keys can either
    be column labels or column indices.
true_values : list, optional
    Values to consider as ``True`` in addition to case-insensitive variants of 'True'.
false_values : list, optional
    Values to consider as ``False`` in addition to case-insensitive variants of 'False'.
skipinitialspace : bool, default False
    Skip spaces after delimiter.
skiprows : int, list of int or Callable, optional
    Line numbers to skip (0-indexed) or number of lines to skip (``int``)
    at the start of the file.

    If callable, the callable function will be evaluated against the row
    indices, returning ``True`` if the row should be skipped and ``False`` otherwise.
    An example of a valid callable argument would be ``lambda x: x in [0, 2]``.
skipfooter : int, default 0
    Number of lines at bottom of file to skip (Unsupported with ``engine='c'``).
nrows : int, optional
    Number of rows of file to read. Useful for reading pieces of large files.
na_values : Hashable, Iterable of Hashable or dict of {Hashable : Iterable}, optional
    Additional strings to recognize as ``NA``/``NaN``. If ``dict`` passed, specific
    per-column ``NA`` values.  By default the following values are interpreted as
    ``NaN``: " ", "#N/A", "#N/A N/A", "#NA", "-1.#IND", "-1.#QNAN", "-NaN", "-nan",
    "1.#IND", "1.#QNAN", "<NA>", "N/A", "NA", "NULL", "NaN", "None",
    "n/a", "nan", "null ".

keep_default_na : bool, default True
    Whether or not to include the default ``NaN`` values when parsing the data.
    Depending on whether ``na_values`` is passed in, the behavior is as follows:

    * If ``keep_default_na`` is ``True``, and ``na_values`` are specified, ``na_values``
      is appended to the default ``NaN`` values used for parsing.
    * If ``keep_default_na`` is ``True``, and ``na_values`` are not specified, only
      the default ``NaN`` values are used for parsing.
    * If ``keep_default_na`` is ``False``, and ``na_values`` are specified, only
      the ``NaN`` values specified ``na_values`` are used for parsing.
    * If ``keep_default_na`` is ``False``, and ``na_values`` are not specified, no
      strings will be parsed as ``NaN``.

    Note that if ``na_filter`` is passed in as ``False``, the ``keep_default_na`` and
    ``na_values`` parameters will be ignored.
na_filter : bool, default True
    Detect missing value markers (empty strings and the value of ``na_values``). In
    data without any ``NA`` values, passing ``na_filter=False`` can improve the
    performance of reading a large file.
verbose : bool, default False
    Indicate number of ``NA`` values placed in non-numeric columns.

    .. deprecated:: 2.2.0
skip_blank_lines : bool, default True
    If ``True``, skip over blank lines rather than interpreting as ``NaN`` values.
parse_dates : bool, list of Hashable, list of lists or dict of {Hashable : list}, default False
    The behavior is as follows:

    * ``bool``. If ``True`` -> try parsing the index. Note: Automatically set to
      ``True`` if ``date_format`` or ``date_parser`` arguments have been passed.
    * ``list`` of ``int`` or names. e.g. If ``[1, 2, 3]`` -> try parsing columns 1, 2, 3
      each as a separate date column.
    * ``list`` of ``list``. e.g.  If ``[[1, 3]]`` -> combine columns 1 and 3 and parse
      as a single date column. Values are joined with a space before parsing.
    * ``dict``, e.g. ``{'foo' : [1, 3]}`` -> parse columns 1, 3 as date and call
      result 'foo'. Values are joined with a space before parsing.

    If a column or index cannot be represented as an array of ``datetime``,
    say because of an unparsable value or a mixture of timezones, the column
    or index will be returned unaltered as an ``object`` data type. For
    non-standard ``datetime`` parsing, use :func:`~pandas.to_datetime` after
    :func:`~pandas.read_csv`.

    Note: A fast-path exists for iso8601-formatted dates.
infer_datetime_format : bool, default False
    If ``True`` and ``parse_dates`` is enabled, pandas will attempt to infer the
    format of the ``datetime`` strings in the columns, and if it can be inferred,
    switch to a faster method of parsing them. In some cases this can increase
    the parsing speed by 5-10x.

    .. deprecated:: 2.0.0
        A strict version of this argument is now the default, passing it has no effect.

keep_date_col : bool, default False
    If ``True`` and ``parse_dates`` specifies combining multiple columns then
    keep the original columns.
date_parser : Callable, optional
    Function to use for converting a sequence of string columns to an array of
    ``datetime`` instances. The default uses ``dateutil.parser.parser`` to do the
    conversion. pandas will try to call ``date_parser`` in three different ways,
    advancing to the next if an exception occurs: 1) Pass one or more arrays
    (as defined by ``parse_dates``) as arguments; 2) concatenate (row-wise) the
    string values from the columns defined by ``parse_dates`` into a single array
    and pass that; and 3) call ``date_parser`` once for each row using one or
    more strings (corresponding to the columns defined by ``parse_dates``) as
    arguments.

    .. deprecated:: 2.0.0
       Use ``date_format`` instead, or read in as ``object`` and then apply
       :func:`~pandas.to_datetime` as-needed.
date_format : str or dict of column -> format, optional
    Format to use for parsing dates when used in conjunction with ``parse_dates``.
    The strftime to parse time, e.g. :const:`"%d/%m/%Y"`. See
    `strftime documentation
    <https://docs.python.org/3/library/datetime.html
    #strftime-and-strptime-behavior>`_ for more information on choices, though
    note that :const:`"%f"` will parse all the way up to nanoseconds.
    You can also pass:

    - "ISO8601", to parse any `ISO8601 <https://en.wikipedia.org/wiki/ISO_8601>`_
        time string (not necessarily in exactly the same format);
    - "mixed", to infer the format for each element individually. This is risky,
        and you should probably use it along with `dayfirst`.

    .. versionadded:: 2.0.0
dayfirst : bool, default False
    DD/MM format dates, international and European format.
cache_dates : bool, default True
    If ``True``, use a cache of unique, converted dates to apply the ``datetime``
    conversion. May produce significant speed-up when parsing duplicate
    date strings, especially ones with timezone offsets.

iterator : bool, default False
    Return ``TextFileReader`` object for iteration or getting chunks with
    ``get_chunk()``.
chunksize : int, optional
    Number of lines to read from the file per chunk. Passing a value will cause the
    function to return a ``TextFileReader`` object for iteration.
    See the `IO Tools docs
    <https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_
    for more information on ``iterator`` and ``chunksize``.

compression : str or dict, default 'infer'
    For on-the-fly decompression of on-disk data. If 'infer' and 'filepath_or_buffer' is
    path-like, then detect compression from the following extensions: '.gz',
    '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
    (otherwise no compression).
    If using 'zip' or 'tar', the ZIP file must contain only one data file to be read in.
    Set to ``None`` for no decompression.
    Can also be a dict with key ``'method'`` set
    to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
    other key-value pairs are forwarded to
    ``zipfile.ZipFile``, ``gzip.GzipFile``,
    ``bz2.BZ2File``, ``zstandard.ZstdDecompressor``, ``lzma.LZMAFile`` or
    ``tarfile.TarFile``, respectively.
    As an example, the following could be passed for Zstandard decompression using a
    custom compression dictionary:
    ``compression={'method': 'zstd', 'dict_data': my_compression_dict}``.

    .. versionadded:: 1.5.0
        Added support for `.tar` files.

    .. versionchanged:: 1.4.0 Zstandard support.

thousands : str (length 1), optional
    Character acting as the thousands separator in numerical values.
decimal : str (length 1), default '.'
    Character to recognize as decimal point (e.g., use ',' for European data).
lineterminator : str (length 1), optional
    Character used to denote a line break. Only valid with C parser.
quotechar : str (length 1), optional
    Character used to denote the start and end of a quoted item. Quoted
    items can include the ``delimiter`` and it will be ignored.
quoting : {0 or csv.QUOTE_MINIMAL, 1 or csv.QUOTE_ALL, 2 or csv.QUOTE_NONNUMERIC, 3 or csv.QUOTE_NONE}, default csv.QUOTE_MINIMAL
    Control field quoting behavior per ``csv.QUOTE_*`` constants. Default is
    ``csv.QUOTE_MINIMAL`` (i.e., 0) which implies that only fields containing special
    characters are quoted (e.g., characters defined in ``quotechar``, ``delimiter``,
    or ``lineterminator``.
doublequote : bool, default True
   When ``quotechar`` is specified and ``quoting`` is not ``QUOTE_NONE``, indicate
   whether or not to interpret two consecutive ``quotechar`` elements INSIDE a
   field as a single ``quotechar`` element.
escapechar : str (length 1), optional
    Character used to escape other characters.
comment : str (length 1), optional
    Character indicating that the remainder of line should not be parsed.
    If found at the beginning
    of a line, the line will be ignored altogether. This parameter must be a
    single character. Like empty lines (as long as ``skip_blank_lines=True``),
    fully commented lines are ignored by the parameter ``header`` but not by
    ``skiprows``. For example, if ``comment='#'``, parsing
    ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in ``'a,b,c'`` being
    treated as the header.
encoding : str, optional, default 'utf-8'
    Encoding to use for UTF when reading/writing (ex. ``'utf-8'``). `List of Python
    standard encodings
    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .

encoding_errors : str, optional, default 'strict'
    How encoding errors are treated. `List of possible values
    <https://docs.python.org/3/library/codecs.html#error-handlers>`_ .

    .. versionadded:: 1.3.0

dialect : str or csv.Dialect, optional
    If provided, this parameter will override values (default or not) for the
    following parameters: ``delimiter``, ``doublequote``, ``escapechar``,
    ``skipinitialspace``, ``quotechar``, and ``quoting``. If it is necessary to
    override values, a ``ParserWarning`` will be issued. See ``csv.Dialect``
    documentation for more details.
on_bad_lines : {'error', 'warn', 'skip'} or Callable, default 'error'
    Specifies what to do upon encountering a bad line (a line with too many fields).
    Allowed values are :

    - ``'error'``, raise an Exception when a bad line is encountered.
    - ``'warn'``, raise a warning when a bad line is encountered and skip that line.
    - ``'skip'``, skip bad lines without raising or warning when they are encountered.

    .. versionadded:: 1.3.0

    .. versionadded:: 1.4.0

        - Callable, function with signature
          ``(bad_line: list[str]) -> list[str] | None`` that will process a single
          bad line. ``bad_line`` is a list of strings split by the ``sep``.
          If the function returns ``None``, the bad line will be ignored.
          If the function returns a new ``list`` of strings with more elements than
          expected, a ``ParserWarning`` will be emitted while dropping extra elements.
          Only supported when ``engine='python'``

    .. versionchanged:: 2.2.0

        - Callable, function with signature
          as described in `pyarrow documentation
          <https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html
          #pyarrow.csv.ParseOptions.invalid_row_handler>`_ when ``engine='pyarrow'``

delim_whitespace : bool, default False
    Specifies whether or not whitespace (e.g. ``' '`` or ``'\\t'``) will be
    used as the ``sep`` delimiter. Equivalent to setting ``sep='\\s+'``. If this option
    is set to ``True``, nothing should be passed in for the ``delimiter``
    parameter.

    .. deprecated:: 2.2.0
        Use ``sep="\\s+"`` instead.
low_memory : bool, default True
    Internally process the file in chunks, resulting in lower memory use
    while parsing, but possibly mixed type inference.  To ensure no mixed
    types either set ``False``, or specify the type with the ``dtype`` parameter.
    Note that the entire file is read into a single :class:`~pandas.DataFrame`
    regardless, use the ``chunksize`` or ``iterator`` parameter to return the data in
    chunks. (Only valid with C parser).
memory_map : bool, default False
    If a filepath is provided for ``filepath_or_buffer``, map the file object
    directly onto memory and access the data directly from there. Using this
    option can improve performance because there is no longer any I/O overhead.
float_precision : {'high', 'legacy', 'round_trip'}, optional
    Specifies which converter the C engine should use for floating-point
    values. The options are ``None`` or ``'high'`` for the ordinary converter,
    ``'legacy'`` for the original lower precision pandas converter, and
    ``'round_trip'`` for the round-trip converter.

storage_options : dict, optional
    Extra options that make sense for a particular storage connection, e.g.
    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
    are forwarded to ``urllib.request.Request`` as header options. For other
    URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
    forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
    details, and for more examples on storage options refer `here
    <https://pandas.pydata.org/docs/user_guide/io.html?
    highlight=storage_options#reading-writing-remote-files>`_.

dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'
    Back-end data type applied to the resultant :class:`DataFrame`
    (still experimental). Behaviour is as follows:

    * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
      (default).
    * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
      DataFrame.

    .. versionadded:: 2.0

Returns
-------
DataFrame or TextFileReader
    A comma-separated values (csv) file is returned as two-dimensional
    data structure with labeled axes.

See Also
--------
DataFrame.to_csv : Write DataFrame to a comma-separated values (csv) file.
read_table : Read general delimited file into DataFrame.
read_fwf : Read a table of fixed-width formatted lines into DataFrame.

Examples
--------
>>> pd.read_csv('data.csv')  # doctest: +SKIP
""" ;
    doap:name "read_csv" ;
    fnoi:module "pandas.io.parsers.readers" ;
    fnoi:package "pandas" .

python:setitem3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a[b] = c." ;
    doap:name "setitem" ;
    fnoi:module "_operator" .

python:train3441e77a a fnoi:Implementation,
        fnoi:PythonFunction ;
    doap:name "train" ;
    fnoi:file <file:///home/ponachte/projects/py2rdf/docker_examples/diagnose/train.py> ;
    fnoi:module "docker_examples.diagnose.train" ;
    fnoi:package "docker_examples" .

ex:GaussianNB a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:GaussianNBParameter0 ;
            rdf:_2 ex:GaussianNBParameter1 ] ;
    fno:name "GaussianNB" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:GaussianNBOutput ] .

ex:LabelEncoder a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ] ;
    fno:name "LabelEncoder" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:LabelEncoderOutput ] .

ex:RandomForestClassifier a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:RandomForestClassifierParameter0 ;
            rdf:_10 ex:RandomForestClassifierParameter9 ;
            rdf:_11 ex:RandomForestClassifierParameter10 ;
            rdf:_12 ex:RandomForestClassifierParameter11 ;
            rdf:_13 ex:RandomForestClassifierParameter12 ;
            rdf:_14 ex:RandomForestClassifierParameter13 ;
            rdf:_15 ex:RandomForestClassifierParameter14 ;
            rdf:_16 ex:RandomForestClassifierParameter15 ;
            rdf:_17 ex:RandomForestClassifierParameter16 ;
            rdf:_18 ex:RandomForestClassifierParameter17 ;
            rdf:_19 ex:RandomForestClassifierParameter18 ;
            rdf:_2 ex:RandomForestClassifierParameter1 ;
            rdf:_3 ex:RandomForestClassifierParameter2 ;
            rdf:_4 ex:RandomForestClassifierParameter3 ;
            rdf:_5 ex:RandomForestClassifierParameter4 ;
            rdf:_6 ex:RandomForestClassifierParameter5 ;
            rdf:_7 ex:RandomForestClassifierParameter6 ;
            rdf:_8 ex:RandomForestClassifierParameter7 ;
            rdf:_9 ex:RandomForestClassifierParameter8 ] ;
    fno:name "RandomForestClassifier" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:RandomForestClassifierOutput ] .

ex:SVC a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:SVCParameter0 ;
            rdf:_10 ex:SVCParameter9 ;
            rdf:_11 ex:SVCParameter10 ;
            rdf:_12 ex:SVCParameter11 ;
            rdf:_13 ex:SVCParameter12 ;
            rdf:_14 ex:SVCParameter13 ;
            rdf:_15 ex:SVCParameter14 ;
            rdf:_2 ex:SVCParameter1 ;
            rdf:_3 ex:SVCParameter2 ;
            rdf:_4 ex:SVCParameter3 ;
            rdf:_5 ex:SVCParameter4 ;
            rdf:_6 ex:SVCParameter5 ;
            rdf:_7 ex:SVCParameter6 ;
            rdf:_8 ex:SVCParameter7 ;
            rdf:_9 ex:SVCParameter8 ] ;
    fno:name "SVC" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:SVCOutput ] .

ex:dropna a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:dropnaParameter0 ;
            rdf:_2 ex:dropnaParameter1 ] ;
    fno:name "dropna" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:dropnaOutput ] .

ex:dumpOutput a fno:Output ;
    fno:predicate ex:dumpResult ;
    fno:type python:Any3b977f6c .

ex:fitOutput a fno:Output ;
    fno:predicate ex:fitResult ;
    fno:type python:Any3b977f6c .

ex:fit_transform a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:fit_transformParameter0 ;
            rdf:_2 ex:fit_transformParameter1 ] ;
    fno:name "fit_transform" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:fit_transformOutput ] .

ex:getitemOutput a fno:Output ;
    fno:predicate ex:getitemResult ;
    fno:type python:Any3b977f6c .

ex:read_csv a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:read_csvParameter0 ;
            rdf:_10 ex:read_csvParameter9 ;
            rdf:_11 ex:read_csvParameter10 ;
            rdf:_12 ex:read_csvParameter11 ;
            rdf:_13 ex:read_csvParameter12 ;
            rdf:_14 ex:read_csvParameter13 ;
            rdf:_15 ex:read_csvParameter14 ;
            rdf:_16 ex:read_csvParameter15 ;
            rdf:_17 ex:read_csvParameter16 ;
            rdf:_18 ex:read_csvParameter17 ;
            rdf:_19 ex:read_csvParameter18 ;
            rdf:_2 ex:read_csvParameter1 ;
            rdf:_20 ex:read_csvParameter19 ;
            rdf:_21 ex:read_csvParameter20 ;
            rdf:_22 ex:read_csvParameter21 ;
            rdf:_23 ex:read_csvParameter22 ;
            rdf:_24 ex:read_csvParameter23 ;
            rdf:_25 ex:read_csvParameter24 ;
            rdf:_26 ex:read_csvParameter25 ;
            rdf:_27 ex:read_csvParameter26 ;
            rdf:_28 ex:read_csvParameter27 ;
            rdf:_29 ex:read_csvParameter28 ;
            rdf:_3 ex:read_csvParameter2 ;
            rdf:_30 ex:read_csvParameter29 ;
            rdf:_31 ex:read_csvParameter30 ;
            rdf:_32 ex:read_csvParameter31 ;
            rdf:_33 ex:read_csvParameter32 ;
            rdf:_34 ex:read_csvParameter33 ;
            rdf:_35 ex:read_csvParameter34 ;
            rdf:_36 ex:read_csvParameter35 ;
            rdf:_37 ex:read_csvParameter36 ;
            rdf:_38 ex:read_csvParameter37 ;
            rdf:_39 ex:read_csvParameter38 ;
            rdf:_4 ex:read_csvParameter3 ;
            rdf:_40 ex:read_csvParameter39 ;
            rdf:_41 ex:read_csvParameter40 ;
            rdf:_42 ex:read_csvParameter41 ;
            rdf:_43 ex:read_csvParameter42 ;
            rdf:_44 ex:read_csvParameter43 ;
            rdf:_45 ex:read_csvParameter44 ;
            rdf:_46 ex:read_csvParameter45 ;
            rdf:_47 ex:read_csvParameter46 ;
            rdf:_48 ex:read_csvParameter47 ;
            rdf:_49 ex:read_csvParameter48 ;
            rdf:_5 ex:read_csvParameter4 ;
            rdf:_6 ex:read_csvParameter5 ;
            rdf:_7 ex:read_csvParameter6 ;
            rdf:_8 ex:read_csvParameter7 ;
            rdf:_9 ex:read_csvParameter8 ] ;
    fno:name "read_csv" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:read_csvOutput ] .

ex:setitem a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:setitemParameter0 ;
            rdf:_2 ex:setitemParameter1 ;
            rdf:_3 ex:setitemParameter2 ] ;
    fno:name "setitem" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:setitemOutput ] .

ex:train a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ] ;
    fno:name "train" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:trainOutput ] .

ex:trainOutput a fno:Output ;
    fno:predicate ex:trainResult ;
    fno:type python:Any3b977f6c .

cf:tuple a prov:Entity,
        fno:Function ;
    dcterms:descrition "ask GPT for description" ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 cf:Elements ] ;
    fno:name "tuple" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 cf:TupleOutput ] .

python:LabelEncoder4715175f a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """Encode target labels with value between 0 and n_classes-1.

    This transformer should be used to encode target values, *i.e.* `y`, and
    not the input `X`.

    Read more in the :ref:`User Guide <preprocessing_targets>`.

    .. versionadded:: 0.12

    Attributes
    ----------
    classes_ : ndarray of shape (n_classes,)
        Holds the label for each class.

    See Also
    --------
    OrdinalEncoder : Encode categorical features using an ordinal encoding
        scheme.
    OneHotEncoder : Encode categorical features as a one-hot numeric array.

    Examples
    --------
    `LabelEncoder` can be used to normalize labels.

    >>> from sklearn.preprocessing import LabelEncoder
    >>> le = LabelEncoder()
    >>> le.fit([1, 2, 2, 6])
    LabelEncoder()
    >>> le.classes_
    array([1, 2, 6])
    >>> le.transform([1, 1, 2, 6])
    array([0, 0, 1, 2]...)
    >>> le.inverse_transform([0, 0, 1, 2])
    array([1, 1, 2, 6])

    It can also be used to transform non-numerical labels (as long as they are
    hashable and comparable) to numerical labels.

    >>> le = LabelEncoder()
    >>> le.fit(["paris", "paris", "tokyo", "amsterdam"])
    LabelEncoder()
    >>> list(le.classes_)
    [np.str_('amsterdam'), np.str_('paris'), np.str_('tokyo')]
    >>> le.transform(["tokyo", "tokyo", "paris"])
    array([2, 2, 1]...)
    >>> list(le.inverse_transform([2, 2, 1]))
    [np.str_('tokyo'), np.str_('tokyo'), np.str_('paris')]
    """ ;
    doap:name "LabelEncoder" ;
    fnoi:module "sklearn.preprocessing._label" ;
    fnoi:package "sklearn" .

ex:GaussianNBParameter0 a fno:Parameter ;
    fno:predicate ex:priors ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:GaussianNBParameter1 a fno:Parameter ;
    fno:predicate ex:var_smoothing ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:GaussianNB_1 fnoc:applies ex:GaussianNB ;
    fnoc:next ex:fit_2 .

ex:LabelEncoder_1 fnoc:applies ex:LabelEncoder ;
    fnoc:next ex:fit_transform_1 .

ex:RandomForestClassifierParameter1 a fno:Parameter ;
    fno:predicate ex:criterion ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter10 a fno:Parameter ;
    fno:predicate ex:oob_score ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter11 a fno:Parameter ;
    fno:predicate ex:n_jobs ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter13 a fno:Parameter ;
    fno:predicate ex:verbose ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter14 a fno:Parameter ;
    fno:predicate ex:warm_start ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter15 a fno:Parameter ;
    fno:predicate ex:class_weight ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter16 a fno:Parameter ;
    fno:predicate ex:ccp_alpha ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter17 a fno:Parameter ;
    fno:predicate ex:max_samples ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter18 a fno:Parameter ;
    fno:predicate ex:monotonic_cst ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter2 a fno:Parameter ;
    fno:predicate ex:max_depth ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter3 a fno:Parameter ;
    fno:predicate ex:min_samples_split ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter4 a fno:Parameter ;
    fno:predicate ex:min_samples_leaf ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter5 a fno:Parameter ;
    fno:predicate ex:min_weight_fraction_leaf ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter6 a fno:Parameter ;
    fno:predicate ex:max_features ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter7 a fno:Parameter ;
    fno:predicate ex:max_leaf_nodes ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter8 a fno:Parameter ;
    fno:predicate ex:min_impurity_decrease ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter9 a fno:Parameter ;
    fno:predicate ex:bootstrap ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter0 a fno:Parameter ;
    fno:predicate ex:C ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter1 a fno:Parameter ;
    fno:predicate ex:kernel ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter10 a fno:Parameter ;
    fno:predicate ex:verbose ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter11 a fno:Parameter ;
    fno:predicate ex:max_iter ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter12 a fno:Parameter ;
    fno:predicate ex:decision_function_shape ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter13 a fno:Parameter ;
    fno:predicate ex:break_ties ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter14 a fno:Parameter ;
    fno:predicate ex:random_state ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter2 a fno:Parameter ;
    fno:predicate ex:degree ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter3 a fno:Parameter ;
    fno:predicate ex:gamma ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter4 a fno:Parameter ;
    fno:predicate ex:coef0 ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter5 a fno:Parameter ;
    fno:predicate ex:shrinking ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter6 a fno:Parameter ;
    fno:predicate ex:probability ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter7 a fno:Parameter ;
    fno:predicate ex:tol ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter8 a fno:Parameter ;
    fno:predicate ex:cache_size ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVCParameter9 a fno:Parameter ;
    fno:predicate ex:class_weight ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:SVC_1 fnoc:applies ex:SVC ;
    fnoc:next ex:fit_1 .

ex:dropnaOutput a fno:Output ;
    fno:predicate ex:dropnaResult ;
    fno:type python:Any3b977f6c .

ex:dropnaParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:dropnaParameter1 a fno:Parameter ;
    fno:predicate ex:param1 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:dump_1 fnoc:applies ex:dump ;
    fnoc:next ex:dump_2 .

ex:dump_2 fnoc:applies ex:dump ;
    fnoc:next ex:dump_3 .

ex:dump_3 fnoc:applies ex:dump ;
    fnoc:next ex:dump_4 .

ex:dump_4 fnoc:applies ex:dump .

ex:fit_1 fnoc:applies ex:fit ;
    fnoc:next ex:GaussianNB_1 .

ex:fit_2 fnoc:applies ex:fit ;
    fnoc:next ex:RandomForestClassifier_1 .

ex:fit_3 fnoc:applies ex:fit ;
    fnoc:next ex:dump_1 .

ex:fit_transformOutput a fno:Output ;
    fno:predicate ex:fit_transformResult ;
    fno:type python:Any3b977f6c .

ex:fit_transformParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:fit_transformParameter1 a fno:Parameter ;
    fno:predicate ex:param1 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:getitem a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:getitemParameter0 ;
            rdf:_2 ex:getitemParameter1 ] ;
    fno:name "getitem" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:getitemOutput ] .

ex:getitem_1 fnoc:applies ex:getitem ;
    fnoc:next ex:iloc_2 .

ex:getitem_2 fnoc:applies ex:getitem ;
    fnoc:next ex:SVC_1 .

ex:iloc a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:ilocParameter0 ;
            rdf:_2 ex:ilocParameter1 ] ;
    fno:name "iloc" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:ilocOutput ] .

ex:op_neg a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_negParameter0 ] ;
    fno:name "neg" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_negOutput ] .

ex:op_neg_1 fnoc:applies ex:op_neg ;
    fnoc:next cf:slice_2 .

ex:op_neg_2 fnoc:applies ex:op_neg ;
    fnoc:next cf:tuple_2 .

ex:read_csvOutput a fno:Output ;
    fno:predicate ex:read_csvResult ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter1 a fno:Parameter ;
    fno:predicate ex:sep ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter10 a fno:Parameter ;
    fno:predicate ex:true_values ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter11 a fno:Parameter ;
    fno:predicate ex:false_values ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter12 a fno:Parameter ;
    fno:predicate ex:skipinitialspace ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter13 a fno:Parameter ;
    fno:predicate ex:skiprows ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter14 a fno:Parameter ;
    fno:predicate ex:skipfooter ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter15 a fno:Parameter ;
    fno:predicate ex:nrows ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter16 a fno:Parameter ;
    fno:predicate ex:na_values ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter17 a fno:Parameter ;
    fno:predicate ex:keep_default_na ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter18 a fno:Parameter ;
    fno:predicate ex:na_filter ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter19 a fno:Parameter ;
    fno:predicate ex:verbose ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter2 a fno:Parameter ;
    fno:predicate ex:delimiter ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter20 a fno:Parameter ;
    fno:predicate ex:skip_blank_lines ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter21 a fno:Parameter ;
    fno:predicate ex:parse_dates ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter22 a fno:Parameter ;
    fno:predicate ex:infer_datetime_format ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter23 a fno:Parameter ;
    fno:predicate ex:keep_date_col ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter24 a fno:Parameter ;
    fno:predicate ex:date_parser ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter25 a fno:Parameter ;
    fno:predicate ex:date_format ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter26 a fno:Parameter ;
    fno:predicate ex:dayfirst ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter27 a fno:Parameter ;
    fno:predicate ex:cache_dates ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter28 a fno:Parameter ;
    fno:predicate ex:iterator ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter29 a fno:Parameter ;
    fno:predicate ex:chunksize ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter3 a fno:Parameter ;
    fno:predicate ex:header ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter30 a fno:Parameter ;
    fno:predicate ex:compression ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter31 a fno:Parameter ;
    fno:predicate ex:thousands ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter32 a fno:Parameter ;
    fno:predicate ex:decimal ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter33 a fno:Parameter ;
    fno:predicate ex:lineterminator ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter34 a fno:Parameter ;
    fno:predicate ex:quotechar ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter35 a fno:Parameter ;
    fno:predicate ex:quoting ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter36 a fno:Parameter ;
    fno:predicate ex:doublequote ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter37 a fno:Parameter ;
    fno:predicate ex:escapechar ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter38 a fno:Parameter ;
    fno:predicate ex:comment ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter39 a fno:Parameter ;
    fno:predicate ex:encoding ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter4 a fno:Parameter ;
    fno:predicate ex:names ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter40 a fno:Parameter ;
    fno:predicate ex:encoding_errors ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter41 a fno:Parameter ;
    fno:predicate ex:dialect ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter42 a fno:Parameter ;
    fno:predicate ex:on_bad_lines ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter43 a fno:Parameter ;
    fno:predicate ex:delim_whitespace ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter44 a fno:Parameter ;
    fno:predicate ex:low_memory ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter45 a fno:Parameter ;
    fno:predicate ex:memory_map ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter46 a fno:Parameter ;
    fno:predicate ex:float_precision ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter47 a fno:Parameter ;
    fno:predicate ex:storage_options ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter48 a fno:Parameter ;
    fno:predicate ex:dtype_backend ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter5 a fno:Parameter ;
    fno:predicate ex:index_col ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter6 a fno:Parameter ;
    fno:predicate ex:usecols ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter7 a fno:Parameter ;
    fno:predicate ex:dtype ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter8 a fno:Parameter ;
    fno:predicate ex:engine ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter9 a fno:Parameter ;
    fno:predicate ex:converters ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:read_csv_1 fnoc:applies ex:read_csv ;
    fnoc:next ex:dropna_1 .

ex:setitemParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:setitemParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:setitemParameter2 a fno:Parameter ;
    fno:predicate ex:c ;
    fno:required true ;
    fno:type python:Any3b977f6c .

cf:TupleOutput a fno:Output ;
    fno:predicate cf:tupleResult ;
    fno:type rdf:List .

cf:slice a prov:Entity,
        fno:Function ;
    dcterms:descrition "Create a slicing object." ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 cf:LowerIndexParameter ;
            rdf:_2 cf:UpperIndexParameter ;
            rdf:_3 cf:StepParameter ] ;
    fno:name "slice" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 cf:SliceOutput ] .

ex:GaussianNBOutput a fno:Output ;
    fno:predicate ex:GaussianNBResult ;
    fno:type python:Any3b977f6c .

ex:LabelEncoderOutput a fno:Output ;
    fno:predicate ex:LabelEncoderResult ;
    fno:type python:LabelEncoder4715175f .

ex:RandomForestClassifierOutput a fno:Output ;
    fno:predicate ex:RandomForestClassifierResult ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter0 a fno:Parameter ;
    fno:predicate ex:n_estimators ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifierParameter12 a fno:Parameter ;
    fno:predicate ex:random_state ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:RandomForestClassifier_1 fnoc:applies ex:RandomForestClassifier ;
    fnoc:next ex:fit_3 .

ex:SVCOutput a fno:Output ;
    fno:predicate ex:SVCResult ;
    fno:type python:Any3b977f6c .

ex:dropna_1 fnoc:applies ex:dropna ;
    fnoc:next ex:LabelEncoder_1 .

ex:dumpParameter2 a fno:Parameter ;
    fno:predicate ex:compress ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:dumpParameter3 a fno:Parameter ;
    fno:predicate ex:protocol ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:dumpParameter4 a fno:Parameter ;
    fno:predicate ex:cache_size ;
    fno:required false ;
    fno:type python:Any3b977f6c .

ex:fit a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:fitParameter0 ;
            rdf:_2 ex:fitParameter1 ] ;
    fno:name "fit" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:fitOutput ] .

ex:fit_transform_1 fnoc:applies ex:fit_transform ;
    fnoc:next ex:setitem_1 .

ex:getitemParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:getitemParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:ilocOutput a fno:Output ;
    fno:predicate ex:ilocResult ;
    fno:type python:Any3b977f6c .

ex:ilocParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:ilocParameter1 a fno:Parameter ;
    fno:predicate ex:param1 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:iloc_1 fnoc:applies ex:iloc ;
    fnoc:next cf:slice_1 .

ex:iloc_2 fnoc:applies ex:iloc ;
    fnoc:next cf:slice_3 .

ex:op_negOutput a fno:Output ;
    fno:predicate ex:op_negResult ;
    fno:type python:Any3b977f6c .

ex:op_negParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:read_csvParameter0 a fno:Parameter ;
    fno:predicate ex:filepath_or_buffer ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:setitemOutput a fno:Output ;
    fno:predicate ex:setitemResult ;
    fno:type python:Any3b977f6c .

cf:LowerIndexParameter a fno:Parameter ;
    fno:predicate cf:lower ;
    fno:type xsd:integer .

cf:SliceOutput a fno:Output ;
    fno:predicate cf:sliceResult ;
    fno:type rdf:Resource .

cf:StepParameter a fno:Parameter ;
    fno:predicate cf:step ;
    fno:type xsd:integer .

cf:UpperIndexParameter a fno:Parameter ;
    fno:predicate cf:upper ;
    fno:type xsd:integer .

cf:tuple_1 fnoc:applies cf:tuple ;
    fnoc:next ex:getitem_1 .

cf:tuple_2 fnoc:applies cf:tuple ;
    fnoc:next ex:getitem_2 .

python:getattre513fb1f a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description """Get a named attribute from an object.

getattr(x, 'y') is equivalent to x.y
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.""" ;
    doap:name "getattr" ;
    fnoi:module "builtins" .

ex:dump a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:dumpParameter0 ;
            rdf:_2 ex:dumpParameter1 ;
            rdf:_3 ex:dumpParameter2 ;
            rdf:_4 ex:dumpParameter3 ;
            rdf:_5 ex:dumpParameter4 ] ;
    fno:name "dump" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:dumpOutput ] .

ex:fitParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:fitParameter1 a fno:Parameter ;
    fno:predicate ex:param1 ;
    fno:required true ;
    fno:type python:Any3b977f6c .

cf:Elements a fno:Parameter ;
    fno:predicate cf:elements .

cf:slice_1 fnoc:applies cf:slice ;
    fnoc:next ex:op_neg_1 .

cf:slice_2 fnoc:applies cf:slice ;
    fnoc:next cf:tuple_1 .

cf:slice_3 fnoc:applies cf:slice ;
    fnoc:next ex:op_neg_2 .

ex:setitem_1 fnoc:applies ex:setitem ;
    fnoc:next ex:iloc_1 .

ex:dumpParameter0 a fno:Parameter ;
    fno:predicate ex:value ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:dumpParameter1 a fno:Parameter ;
    fno:predicate ex:filename ;
    fno:required true ;
    fno:type python:Any3b977f6c .

python:Any3b977f6c a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
    """ ;
    doap:name "Any" ;
    fnoi:file <file:///usr/lib/python3.12/typing.py> ;
    fnoi:module "typing" .

