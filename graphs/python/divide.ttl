@prefix cf: <http://www.example.com/controlflow#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ex: <http://www.example.com#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix ptype: <http://example.com/ptype#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex:divideComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFrom [ fnoc:constituentFunction ex:divide ;
                    fnoc:functionParameter ex:divideParameter1 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_truediv_1 ;
                    fnoc:functionParameter ex:op_truedivParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_gt_1 ;
                    fnoc:functionOutput ex:op_gtOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:if_1 ;
                    fnoc:functionParameter cf:TestParameter ] ],
        [ fnoc:mapFromTerm "niet delen door 0!" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:divide ;
                    fnoc:functionParameter ex:divideOutput ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_truediv_1 ;
                    fnoc:functionOutput ex:op_truedivOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:divide ;
                    fnoc:functionParameter ex:divideOutput ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:divide ;
                    fnoc:functionParameter ex:divideParameter1 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_gt_1 ;
                    fnoc:functionParameter ex:op_gtParameter0 ] ],
        [ fnoc:mapFromTerm 0 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_gt_1 ;
                    fnoc:functionParameter ex:op_gtParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:divide ;
                    fnoc:functionParameter ex:divideParameter0 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_truediv_1 ;
                    fnoc:functionParameter ex:op_truedivParameter0 ] ] ;
    fnoc:represents ex:divide ;
    fnoc:start ex:op_gt_1 .

ex:divideMapping a fno:Mapping ;
    fno:function ex:divide ;
    fno:implementation ex:dividePythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "divide" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:divideParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:divideParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:divideParameter1 ;
            fnom:implementationProperty "denominator" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:divideParameter0 ;
            fnom:implementationProperty "numerator" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:divideOutput ] .

ex:op_gtMapping a fno:Mapping ;
    fno:function ex:op_gt ;
    fno:implementation ex:op_gtPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "gt" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_gtParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_gtParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_gtOutput ] .

ex:op_truedivMapping a fno:Mapping ;
    fno:function ex:op_truediv ;
    fno:implementation ex:op_truedivPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "truediv" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_truedivParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_truedivParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_truedivOutput ] .

ex:dividePythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "divide" ;
    dcterms:description "None" ;
    fnoi:file "/home/ponachte/projects/py2rdf/describe_functions.py" ;
    fnoi:module "__main__" .

ex:op_gtPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "gt" ;
    dcterms:description "Same as a > b." ;
    fnoi:module "_operator" .

ex:op_truedivPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "truediv" ;
    dcterms:description "Same as a / b." ;
    fnoi:module "_operator" .

cf:if a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 cf:TestParameter ] .

ex:intPythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "int" ;
    dcterms:description """int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4""" ;
    fnoi:module "builtins" .

ex:op_gt a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_gtParameter0 ;
            rdf:_2 ex:op_gtParameter1 ] ;
    fno:name "gt" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_gtOutput ] .

ex:op_truediv a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_truedivParameter0 ;
            rdf:_2 ex:op_truedivParameter1 ] ;
    fno:name "truediv" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_truedivOutput ] .

cf:TestParameter a fno:Parameter ;
    fno:predicate cf:test ;
    fno:type ptype:bool .

cf:if_1 fnoc:applies cf:if ;
    fnoc:false ex:op_truediv_1 .

ex:op_gtOutput a fno:Output ;
    fno:predicate ex:op_gtResult ;
    fno:type ex:AnyPythonClass .

ex:op_gtParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type ex:AnyPythonClass .

ex:op_gtParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type ex:AnyPythonClass .

ex:op_truedivOutput a fno:Output ;
    fno:predicate ex:op_truedivResult ;
    fno:type ex:AnyPythonClass .

ex:op_truedivParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type ex:AnyPythonClass .

ex:op_truedivParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type ex:AnyPythonClass .

ex:divideOutput a fno:Output ;
    fno:predicate ex:divideResult ;
    fno:type ex:AnyPythonClass .

ex:divideParameter0 a fno:Parameter ;
    fno:predicate ex:numerator ;
    fno:required true ;
    fno:type ex:intPythonClass .

ex:op_gt_1 fnoc:applies ex:op_gt ;
    fnoc:next cf:if_1 .

ex:op_truediv_1 fnoc:applies ex:op_truediv .

ex:divideParameter1 a fno:Parameter ;
    fno:predicate ex:denominator ;
    fno:required true ;
    fno:type ex:intPythonClass .

ex:AnyPythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "Any" ;
    dcterms:description """Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
    """ ;
    fnoi:file "/home/ponachte/anaconda3/lib/python3.12/typing.py" ;
    fnoi:module "typing" .

ex:divide a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:divideParameter0 ;
            rdf:_2 ex:divideParameter1 ] ;
    fno:name "divide" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:divideOutput ] .

