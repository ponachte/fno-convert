@prefix cf: <http://www.example.com/controlflow#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix ex: <http://www.example.com#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix ptype: <http://example.com/ptype#> .
@prefix python: <http://www.example.com/python#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex:binarycountComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFrom [ fnoc:constituentFunction ex:iter_1 ;
                    fnoc:functionOutput ex:iterOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:next_1 ;
                    fnoc:functionParameter ex:nextParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:enumerate_1 ;
                    fnoc:functionOutput ex:enumerateOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:iter_1 ;
                    fnoc:functionParameter ex:iterParameter0 ] ],
        [ fnoc:mapFromTerm 2 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_pow_1 ;
                    fnoc:functionParameter ex:op_powParameter0 ] ],
        [ fnoc:mapFromTerm 0 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionParameter ex:op_addParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:binarycount ;
                    fnoc:functionParameter ex:binarycountParameter0 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:enumerate_1 ;
                    fnoc:functionParameter ex:enumerateParameter0 ] ],
        [ fnoc:mapFromTerm 1 ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_eq_1 ;
                    fnoc:functionParameter ex:op_eqParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionOutput ex:op_addOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionParameter ex:op_addParameter0 ] ;
            fnoc:priority ex:op_add_1 ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionOutput ex:op_addOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:binarycount ;
                    fnoc:functionParameter ex:binarycountOutput ] ],
        [ fnoc:mapFromTerm "i" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_pow_1 ;
                    fnoc:functionParameter ex:op_powParameter1 ] ],
        [ fnoc:mapFromTerm "bit" ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_eq_1 ;
                    fnoc:functionParameter ex:op_eqParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_eq_1 ;
                    fnoc:functionOutput ex:op_eqOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction cf:if_1 ;
                    fnoc:functionParameter cf:TestParameter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_pow_1 ;
                    fnoc:functionOutput ex:op_powOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionParameter ex:op_addParameter1 ] ] ;
    fnoc:represents ex:binarycount ;
    fnoc:start ex:enumerate_1 .

ex:binarycountMapping a fno:Mapping ;
    fno:function ex:binarycount ;
    fno:implementation python:binarycount184ba669 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "binarycount" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:binarycountParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:binarycountParameter0 ;
            fnom:implementationProperty "bits" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:binarycountOutput ] ;
    fnom:mappingMethod "default" .

ex:enumerateMapping a fno:Mapping ;
    fno:function ex:enumerate ;
    fno:implementation python:enumeratee513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "enumerate" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:enumerateParameter0 ;
            fnom:implementationProperty "iterable" ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:enumerateParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:enumerateParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:enumerateParameter1 ;
            fnom:implementationProperty "start" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue 0 ;
            fnom:functionParameter ex:enumerateParameter1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:enumerateOutput ] ;
    fnom:mappingMethod "default" .

ex:iterMapping a fno:Mapping ;
    fno:function ex:iter ;
    fno:implementation python:itere513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "iter" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:iterParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:iterOutput ] ;
    fnom:mappingMethod "default" .

ex:nextMapping a fno:Mapping ;
    fno:function ex:next ;
    fno:implementation python:nexte513fb1f ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "next" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:nextParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:nextOutput ] ;
    fnom:mappingMethod "default" .

ex:op_addMapping a fno:Mapping ;
    fno:function ex:op_add ;
    fno:implementation python:op_add3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "add" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_addParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_addParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_addOutput ] ;
    fnom:mappingMethod "default" .

ex:op_eqMapping a fno:Mapping ;
    fno:function ex:op_eq ;
    fno:implementation python:op_eq3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "eq" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_eqParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_eqParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_eqOutput ] ;
    fnom:mappingMethod "default" .

ex:op_powMapping a fno:Mapping ;
    fno:function ex:op_pow ;
    fno:implementation python:op_pow3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "pow" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_powParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_powParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_powOutput ] ;
    fnom:mappingMethod "default" .

cf:if a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 cf:TestParameter ] ;
    fno:name "if" .

python:binarycount184ba669 a fnoi:Implementation,
        fnoi:PythonFunction ;
    doap:name "binarycount" ;
    fnoi:file <file:///home/ponachte/projects/py2rdf/python_examples/example_functions.py> ;
    fnoi:module "python_examples.example_functions" ;
    fnoi:package "python_examples" .

python:itere513fb1f a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description """Get an iterator from an object.

In the first form, the argument must supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.""" ;
    doap:name "iter" ;
    fnoi:module "builtins" .

python:nexte513fb1f a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description """Return the next item from the iterator.

If default is given and the iterator is exhausted,
it is returned instead of raising StopIteration.""" ;
    doap:name "next" ;
    fnoi:module "builtins" .

python:op_add3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a + b." ;
    doap:name "op_add" ;
    fnoi:module "_operator" .

python:op_eq3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a == b." ;
    doap:name "op_eq" ;
    fnoi:module "_operator" .

python:op_pow3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a ** b." ;
    doap:name "op_pow" ;
    fnoi:module "_operator" .

ex:enumerate a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:enumerateParameter0 ;
            rdf:_2 ex:enumerateParameter1 ] ;
    fno:name "enumerate" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:enumerateOutput ] .

ex:iter a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:iterParameter0 ] ;
    fno:name "iter" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:iterOutput ] .

ex:next a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:nextParameter0 ] ;
    fno:name "next" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:nextOutput ] .

ex:nextOutput a fno:Output ;
    fno:predicate ex:nextResult ;
    fno:type python:Any41485baa .

ex:op_add a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_addParameter0 ;
            rdf:_2 ex:op_addParameter1 ] ;
    fno:name "add" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_addOutput ] .

ex:op_eq a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_eqParameter0 ;
            rdf:_2 ex:op_eqParameter1 ] ;
    fno:name "eq" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_eqOutput ] .

ex:op_pow a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_powParameter0 ;
            rdf:_2 ex:op_powParameter1 ] ;
    fno:name "pow" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_powOutput ] .

cf:TestParameter a fno:Parameter ;
    fno:predicate cf:test ;
    fno:type ptype:bool .

cf:if_1 fnoc:applies cf:if ;
    fnoc:false ex:next_1 ;
    fnoc:true ex:op_pow_1 .

python:enumeratee513fb1f a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """Return an enumerate object.

  iterable
    an object supporting iteration

The enumerate object yields pairs containing a count (from start, which
defaults to zero) and a value yielded by the iterable argument.

enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...""" ;
    doap:name "enumerate" ;
    fnoi:module "builtins" .

ex:binarycountOutput a fno:Output ;
    fno:predicate ex:binarycountResult ;
    fno:type python:Any41485baa .

ex:enumerateOutput a fno:Output ;
    fno:predicate ex:enumerateResult ;
    fno:type python:enumeratee513fb1f .

ex:enumerate_1 fnoc:applies ex:enumerate ;
    fnoc:next ex:iter_1 .

ex:iterOutput a fno:Output ;
    fno:predicate ex:iterResult ;
    fno:type python:Any41485baa .

ex:iterParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:iter_1 fnoc:applies ex:iter ;
    fnoc:next ex:next_1 .

ex:nextParameter0 a fno:Parameter ;
    fno:predicate ex:param0 ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_addParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_eqOutput a fno:Output ;
    fno:predicate ex:op_eqResult ;
    fno:type python:Any41485baa .

ex:op_eqParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_eqParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_powOutput a fno:Output ;
    fno:predicate ex:op_powResult ;
    fno:type python:Any41485baa .

ex:op_powParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_powParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:binarycount a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:binarycountParameter0 ] ;
    fno:name "binarycount" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:binarycountOutput ] .

ex:binarycountParameter0 a fno:Parameter ;
    fno:predicate ex:bits ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:enumerateParameter0 a fno:Parameter ;
    fno:predicate ex:iterable ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:enumerateParameter1 a fno:Parameter ;
    fno:predicate ex:start ;
    fno:required false ;
    fno:type python:Any41485baa .

ex:next_1 fnoc:applies ex:next ;
    fnoc:iterate ex:op_eq_1 .

ex:op_addOutput a fno:Output ;
    fno:predicate ex:op_addResult ;
    fno:type python:Any41485baa .

ex:op_addParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any41485baa .

ex:op_eq_1 fnoc:applies ex:op_eq ;
    fnoc:next cf:if_1 .

ex:op_pow_1 fnoc:applies ex:op_pow ;
    fnoc:next ex:op_add_1 .

ex:op_add_1 fnoc:applies ex:op_add ;
    fnoc:next ex:next_1 .

python:Any41485baa a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
    """ ;
    doap:name "Any" ;
    fnoi:file <file:///home/ponachte/anaconda3/lib/python3.12/typing.py> ;
    fnoi:module "typing" .

