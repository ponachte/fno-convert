@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix ex: <http://www.example.com#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix python: <http://www.example.com/python#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex:op_addMapping a fno:Mapping ;
    fno:function ex:op_add ;
    fno:implementation python:add3c3209e3 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "add" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_addParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:op_addParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:op_addOutput ] ;
    fnom:mappingMethod "default" .

ex:simple_sumComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFrom [ fnoc:constituentFunction ex:simple_sum ;
                    fnoc:functionParameter ex:simple_sumParameter0 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionParameter ex:op_addParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:simple_sum ;
                    fnoc:functionParameter ex:simple_sumParameter1 ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionParameter ex:op_addParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction ex:op_add_1 ;
                    fnoc:functionOutput ex:op_addOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction ex:simple_sum ;
                    fnoc:functionParameter ex:simple_sumOutput ] ] ;
    fnoc:represents ex:simple_sum ;
    fnoc:start ex:op_add_1 .

ex:simple_sumMapping a fno:Mapping ;
    fno:function ex:simple_sum ;
    fno:implementation python:simple_sum184ba669 ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "simple_sum" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:simple_sumParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:simple_sumParameter0 ;
            fnom:implementationProperty "a" ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter ex:simple_sumParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter ex:simple_sumParameter1 ;
            fnom:implementationProperty "b" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput ex:simple_sumOutput ] ;
    fnom:mappingMethod "default" .

python:add3c3209e3 a fnoi:Implementation,
        fnoi:PythonFunction ;
    dcterms:description "Same as a + b." ;
    doap:name "add" ;
    fnoi:module "_operator" .

python:simple_sum184ba669 a fnoi:Implementation,
        fnoi:PythonFunction ;
    doap:name "simple_sum" ;
    fnoi:file <file:///home/ponachte/projects/py2rdf/python_examples/example_functions.py> ;
    fnoi:module "python_examples.example_functions" ;
    fnoi:package "python_examples" .

ex:op_add a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:op_addParameter0 ;
            rdf:_2 ex:op_addParameter1 ] ;
    fno:name "add" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:op_addOutput ] .

python:inte513fb1f a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating-point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4""" ;
    doap:name "int" ;
    fnoi:module "builtins" .

ex:op_addOutput a fno:Output ;
    fno:predicate ex:op_addResult ;
    fno:type python:Any3b977f6c .

ex:op_addParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:op_addParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:Any3b977f6c .

ex:simple_sumOutput a fno:Output ;
    fno:predicate ex:simple_sumResult ;
    fno:type python:Any3b977f6c .

ex:op_add_1 fnoc:applies ex:op_add .

ex:simple_sumParameter0 a fno:Parameter ;
    fno:predicate ex:a ;
    fno:required true ;
    fno:type python:inte513fb1f .

ex:simple_sumParameter1 a fno:Parameter ;
    fno:predicate ex:b ;
    fno:required true ;
    fno:type python:inte513fb1f .

python:Any3b977f6c a fnoi:Implementation,
        fnoi:PythonClass ;
    dcterms:description """Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
    """ ;
    doap:name "Any" ;
    fnoi:file <file:///usr/lib/python3.12/typing.py> ;
    fnoi:module "typing" .

ex:simple_sum a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 ex:simple_sumParameter0 ;
            rdf:_2 ex:simple_sumParameter1 ] ;
    fno:name "simple_sum" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 ex:simple_sumOutput ] .

