@prefix : <http://www.example.com#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix fnoc: <https://w3id.org/function/vocabulary/composition#> .
@prefix fnoi: <https://w3id.org/function/vocabulary/implementation#> .
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#> .
@prefix pf: <http://www.example.com/pythonfunctions#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

:NoneTypePythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "NoneType" ;
    dcterms:description "None" ;
    fnoi:module "builtins" .

:for_loopComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFrom [ fnoc:constituentFunction :n_sum_1 ;
                    fnoc:functionOutput :n_sumOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :format_1 ;
                    fnoc:functionParameter :formatParameter0 ] ],
        [ fnoc:mapFromTerm 10 ;
            fnoc:mapTo [ fnoc:constituentFunction :range_1 ;
                    fnoc:functionParameter :rangeParameter0 ] ],
        [ fnoc:mapFromTerm "faculty sum of n = " ;
            fnoc:mapTo [ fnoc:constituentFunction :joinstr_1 ;
                    fnoc:functionParameter pf:Strings ;
                    fnoc:key 0 ;
                    fnoc:mappingStrategy fnoc:fromList ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :format_1 ;
                    fnoc:functionOutput :formatOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :joinstr_1 ;
                    fnoc:functionParameter pf:Strings ;
                    fnoc:key 1 ;
                    fnoc:mappingStrategy fnoc:fromList ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :range_1 ;
                    fnoc:functionOutput :rangeOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :iter_1 ;
                    fnoc:functionParameter :iterParameter0 ] ],
        [ fnoc:mapFromTerm "" ;
            fnoc:mapTo [ fnoc:constituentFunction :joinstr_1 ;
                    fnoc:functionParameter pf:Delimiter ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :joinstr_1 ;
                    fnoc:functionOutput pf:JoinStringOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :print_1 ;
                    fnoc:functionParameter :printParameter0 ;
                    fnoc:key 0 ;
                    fnoc:mappingStrategy fnoc:fromList ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :next_1 ;
                    fnoc:functionOutput :nextOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :n_sum_1 ;
                    fnoc:functionParameter :n_sumParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :iter_1 ;
                    fnoc:functionOutput :iterOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :next_1 ;
                    fnoc:functionParameter :nextParameter0 ] ] ;
    fnoc:start :range_1 .

:formatMapping a fno:Mapping ;
    fno:function :format ;
    fno:implementation :formatPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "format" ] ;
    fno:parameterMapping [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "" ;
            fnom:functionParameter :formatParameter1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :formatParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :formatParameter1 ;
            fnom:implementationParameterPosition 1 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :formatOutput ] .

:iterMapping a fno:Mapping ;
    fno:function :iter ;
    fno:implementation :iterPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "iter" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :iterParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :iterOutput ] .

:joinstrMapping a fno:Mapping ;
    fno:function pf:joinstr ;
    fno:implementation :joinstrPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "join" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter pf:Strings ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter pf:Delimiter ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput pf:JoinStringOutput ] .

:n_sumComposition a fno:Composition ;
    fnoc:composedOf [ fnoc:mapFrom [ fnoc:constituentFunction :next_2 ;
                    fnoc:functionOutput :nextOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :op_add_1 ;
                    fnoc:functionParameter :op_addParameter1 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :range_2 ;
                    fnoc:functionOutput :rangeOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :iter_2 ;
                    fnoc:functionParameter :iterParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :n_sum ;
                    fnoc:functionParameter :n_sumParameter0 ] ;
            fnoc:mapTo [ fnoc:constituentFunction :range_2 ;
                    fnoc:functionParameter :rangeParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :op_add_1 ;
                    fnoc:functionOutput :op_addOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :op_add_1 ;
                    fnoc:functionParameter :op_addParameter0 ] ;
            fnoc:priority :op_add_1 ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :iter_2 ;
                    fnoc:functionOutput :iterOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :next_2 ;
                    fnoc:functionParameter :nextParameter0 ] ],
        [ fnoc:mapFrom [ fnoc:constituentFunction :op_add_1 ;
                    fnoc:functionOutput :op_addOutput ] ;
            fnoc:mapTo [ fnoc:constituentFunction :n_sum ;
                    fnoc:functionParameter :n_sumOutput ] ],
        [ fnoc:mapFromTerm 0 ;
            fnoc:mapTo [ fnoc:constituentFunction :op_add_1 ;
                    fnoc:functionParameter :op_addParameter0 ] ] ;
    fnoc:represents :n_sum ;
    fnoc:start :range_2 .

:n_sumMapping a fno:Mapping ;
    fno:function :n_sum ;
    fno:implementation :n_sumPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "n_sum" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :n_sumParameter0 ;
            fnom:implementationParameterPosition 0 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter :n_sumParameter0 ;
            fnom:implementationProperty "n" ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :n_sumOutput ] .

:nextMapping a fno:Mapping ;
    fno:function :next ;
    fno:implementation :nextPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "next" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :nextParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :nextOutput ] .

:op_addMapping a fno:Mapping ;
    fno:function :op_add ;
    fno:implementation :op_addPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "add" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :op_addParameter1 ;
            fnom:implementationParameterPosition 1 ],
        [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :op_addParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :op_addOutput ] .

:printMapping a fno:Mapping ;
    fno:function :print ;
    fno:implementation :printPythonImplementation ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "print" ] ;
    fno:parameterMapping [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter :printParameter3 ;
            fnom:implementationProperty "file" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter :printParameter4 ;
            fnom:implementationProperty "flush" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue false ;
            fnom:functionParameter :printParameter4 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue " " ;
            fnom:functionParameter :printParameter1 ],
        [ a fnom:VarPositionalParameterMapping ;
            fnom:functionParameter :printParameter0 ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue """
""" ;
            fnom:functionParameter :printParameter2 ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter :printParameter2 ;
            fnom:implementationProperty "end" ],
        [ a fnom:PropertyParameterMapping ;
            fnom:functionParameter :printParameter1 ;
            fnom:implementationProperty "sep" ],
        [ a fnom:DefaultParameterMapping ;
            fnom:defaultValue "None"^^:NoneTypePythonClass ;
            fnom:functionParameter :printParameter3 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :printOutput ] .

:rangeMapping a fno:Mapping ;
    fno:function :range ;
    fno:implementation :rangePythonClass ;
    fno:methodMapping [ a fnom:StringMethodMapping ;
            fnom:method-name "range" ] ;
    fno:parameterMapping [ a fnom:PositionParameterMapping ;
            fnom:functionParameter :rangeParameter0 ;
            fnom:implementationParameterPosition 0 ] ;
    fno:returnMapping [ a fnom:DefaultReturnMapping ;
            fnom:functionOutput :rangeOutput ] .

:formatPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "format" ;
    dcterms:description """Return type(value).__format__(value, format_spec)

Many built-in types implement format_spec according to the
Format Specification Mini-language. See help('FORMATTING').

If type(value) does not supply a method named __format__
and format_spec is empty, then str(value) is returned.
See also help('SPECIALMETHODS').""" ;
    fnoi:module "builtins" .

:intPythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "int" ;
    dcterms:description """int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4""" ;
    fnoi:module "builtins" .

:iterPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "iter" ;
    dcterms:description """Get an iterator from an object.

In the first form, the argument must supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.""" ;
    fnoi:module "builtins" .

:joinstrPythonImplementation a prov:Agent,
        fnoi:PythonMethod ;
    rdfs:label "join" ;
    dcterms:description """Concatenate any number of strings.

The string whose method is called is inserted in between each given string.
The result is returned as a new string.

Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'""" ;
    fnoi:methodOf :strPythonClass ;
    fnoi:static false .

:n_sumPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "n_sum" ;
    dcterms:description "None" ;
    fnoi:file "/home/ponachte/projects/py2rdf/examples/for_loop.py" ;
    fnoi:module "for_loop" .

:nextPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "next" ;
    dcterms:description """Return the next item from the iterator.

If default is given and the iterator is exhausted,
it is returned instead of raising StopIteration.""" ;
    fnoi:module "builtins" .

:op_addPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "add" ;
    dcterms:description "Same as a + b." ;
    fnoi:module "_operator" .

:printPythonImplementation a prov:Agent,
        fnoi:PythonFunction ;
    rdfs:label "print" ;
    dcterms:description """Prints the values to a stream, or to sys.stdout by default.

  sep
    string inserted between values, default a space.
  end
    string appended after the last value, default a newline.
  file
    a file-like object (stream); defaults to the current sys.stdout.
  flush
    whether to forcibly flush the stream.""" ;
    fnoi:module "builtins" .

:rangePythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "range" ;
    dcterms:description """range(stop) -> range object
range(start, stop[, step]) -> range object

Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement).""" ;
    fnoi:module "builtins" .

:strPythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "str" ;
    dcterms:description """str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.""" ;
    fnoi:module "builtins" .

:format a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :formatParameter0 ;
            rdf:_2 :formatParameter1 ] ;
    fno:name "format" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :formatOutput ] .

:op_add a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :op_addParameter0 ;
            rdf:_2 :op_addParameter1 ] ;
    fno:name "add" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :op_addOutput ] .

:print a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :printParameter0 ;
            rdf:_2 :printParameter1 ;
            rdf:_3 :printParameter2 ;
            rdf:_4 :printParameter3 ;
            rdf:_5 :printParameter4 ] ;
    fno:name "print" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :printOutput ] .

:printOutput a fno:Output ;
    fno:predicate :printResult ;
    fno:type :AnyPythonClass .

:print_1 fnoc:applies :print ;
    fnoc:next :next_1 .

pf:joinstr a prov:Entity,
        fno:Function ;
    dcterms:description "Join a list of strings with a given delimiter." ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 pf:Delimiter ;
            rdf:_2 pf:Strings ] ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 pf:JoinStringOutput ] .

:formatOutput a fno:Output ;
    fno:predicate :formatResult ;
    fno:type :AnyPythonClass .

:formatParameter0 a fno:Parameter ;
    fno:predicate :value ;
    fno:required true ;
    fno:type :AnyPythonClass .

:formatParameter1 a fno:Parameter ;
    fno:predicate :format_spec ;
    fno:required false ;
    fno:type :AnyPythonClass .

:format_1 fnoc:applies :format ;
    fnoc:next :joinstr_1 .

:iter a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :iterParameter0 ] ;
    fno:name "iter" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :iterOutput ] .

:iter_1 fnoc:applies :iter ;
    fnoc:next :next_1 .

:iter_2 fnoc:applies :iter ;
    fnoc:next :next_2 .

:n_sum_1 fnoc:applies :n_sum ;
    fnoc:next :format_1 .

:next a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :nextParameter0 ] ;
    fno:name "next" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :nextOutput ] .

:op_addParameter1 a fno:Parameter ;
    fno:predicate :b ;
    fno:required true ;
    fno:type :AnyPythonClass .

:printParameter0 a fno:Parameter ;
    fno:predicate :args ;
    fno:type :AnyPythonClass .

:printParameter1 a fno:Parameter ;
    fno:predicate :sep ;
    fno:required false ;
    fno:type :AnyPythonClass .

:printParameter2 a fno:Parameter ;
    fno:predicate :end ;
    fno:required false ;
    fno:type :AnyPythonClass .

:printParameter3 a fno:Parameter ;
    fno:predicate :file ;
    fno:required false ;
    fno:type :AnyPythonClass .

:printParameter4 a fno:Parameter ;
    fno:predicate :flush ;
    fno:required false ;
    fno:type :AnyPythonClass .

:range a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :rangeParameter0 ] ;
    fno:name "range" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :rangeOutput ] .

:range_1 fnoc:applies :range ;
    fnoc:next :iter_1 .

:range_2 fnoc:applies :range ;
    fnoc:next :iter_2 .

pf:Delimiter a fno:Parameter ;
    fno:predicate pf:self ;
    fno:required true ;
    fno:type xsd:string .

pf:JoinStringOutput a fno:Output ;
    fno:predicate pf:joinstrResult ;
    fno:type xsd:string .

:iterOutput a fno:Output ;
    fno:predicate :iterResult ;
    fno:type :AnyPythonClass .

:iterParameter0 a fno:Parameter ;
    fno:predicate :iterParameterPred0 ;
    fno:required true ;
    fno:type :AnyPythonClass .

:n_sumOutput a fno:Output ;
    fno:predicate :n_sumResult ;
    fno:type :AnyPythonClass .

:nextOutput a fno:Output ;
    fno:predicate :nextResult ;
    fno:type :AnyPythonClass .

:nextParameter0 a fno:Parameter ;
    fno:predicate :nextParameterPred0 ;
    fno:required true ;
    fno:type :AnyPythonClass .

:next_1 fnoc:applies :next ;
    fnoc:iterate :n_sum_1 .

:next_2 fnoc:applies :next ;
    fnoc:iterate :op_add_1 .

:op_addOutput a fno:Output ;
    fno:predicate :op_addResult ;
    fno:type :AnyPythonClass .

:op_addParameter0 a fno:Parameter ;
    fno:predicate :a ;
    fno:required true ;
    fno:type :AnyPythonClass .

:rangeOutput a fno:Output ;
    fno:predicate :rangeResult ;
    fno:type :AnyPythonClass .

:rangeParameter0 a fno:Parameter ;
    fno:predicate :rangeParameterPred0 ;
    fno:required true ;
    fno:type :AnyPythonClass .

pf:Strings a fno:Parameter ;
    fno:predicate pf:strings ;
    fno:required true ;
    fno:type rdfs:list .

:joinstr_1 fnoc:applies pf:joinstr ;
    fnoc:next :print_1 .

:n_sum a prov:Entity,
        fno:Function ;
    fno:expects [ a rdf:Seq ;
            rdf:_1 :n_sumParameter0 ] ;
    fno:name "n_sum" ;
    fno:returns [ a rdf:Seq ;
            rdf:_1 :n_sumOutput ] .

:n_sumParameter0 a fno:Parameter ;
    fno:predicate :n ;
    fno:required true ;
    fno:type :intPythonClass .

:op_add_1 fnoc:applies :op_add ;
    fnoc:next :next_2 .

:AnyPythonClass a prov:Agent,
        fnoi:PythonClass ;
    rdfs:label "Any" ;
    dcterms:description """Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
    """ ;
    fnoi:file "/home/ponachte/anaconda3/lib/python3.12/typing.py" ;
    fnoi:module "typing" .