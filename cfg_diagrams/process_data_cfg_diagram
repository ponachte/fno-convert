digraph clusterprocess_data {
	graph [label=process_data]
	3 [label="#3
acc_events = events[events['Metric'].str.contains('smartphone') & events[
    'Metric'].str.contains('acceleration') & ~events['Metric'].str.contains
    ('linear')]
print(
    f'Received {len(events)} events - {len(acc_events)} of them are accelerometer data'
    )
if len(acc_events) >= 3 * conf['min_duration_s'] * conf['frequency']:
"]
	4 [label="#4
acc_x = acc_events[acc_events['Metric'].str.contains('x')].copy()
acc_x.sort_values(by='Timestamp')
acc_x.drop(columns=['Metric', 'Sensor'], inplace=True)
acc_x.rename(columns={'Value': 'ACC_x'}, inplace=True)
acc_y = acc_events[acc_events['Metric'].str.contains('y')].copy()
acc_y.sort_values(by='Timestamp')
acc_y.drop(columns=['Metric', 'Sensor'], inplace=True)
acc_y.rename(columns={'Value': 'ACC_y'}, inplace=True)
acc_z = acc_events[acc_events['Metric'].str.contains('z')].copy()
acc_z.sort_values(by='Timestamp')
acc_z.drop(columns=['Metric', 'Sensor'], inplace=True)
acc_z.rename(columns={'Value': 'ACC_z'}, inplace=True)
data = reduce(lambda x, y: pd.merge(x, y, on='Timestamp', how='inner'), [
    acc_x, acc_y, acc_z])
del acc_x, acc_y, acc_z
data['Timestamp'] = pd.to_datetime(data['Timestamp'], format='%H:%M:%S.%f')
data.sort_values(by='Timestamp', inplace=True)
return data
"]
	3 -> 4 [label="len(acc_events) >= 3 * conf['min_duration_s'] * conf['frequency']"]
	6 [label="#6
print('Not enough accelerometer data')
return None, None
"]
	3 -> 6 [label="(len(acc_events) < 3 * conf['min_duration_s'] * conf['frequency'])"]
}
